{"version":3,"sources":["/Users/taozhi/Workspaces/OpenSources/node-sql-parser/webpack/bootstrap","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/external \"big-integer\"","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/parser.single.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/util.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/window.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/over.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/binary.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/func.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/limit.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/with.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/update.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/insert.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/tables.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/select.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/show.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/array-struct.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/expr.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/aggregation.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/assign.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/case.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/column.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/interval.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/index-definition.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/constrain.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/create.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/alter.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/command.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/exec.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/union.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/sqlite.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/delete.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/sql.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/parser.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c11","head","tail","createBinaryExprChain","peg$c16","createList","peg$c19","peg$literalExpectation","peg$c27","peg$c41","peg$c43","peg$c45","peg$c48","peg$c50","peg$c53","peg$c55","peg$c57","peg$c64","peg$c69","peg$c71","peg$c74","peg$c77","peg$c79","peg$c81","peg$c83","peg$c85","peg$c88","peg$c90","peg$c92","peg$c94","peg$c97","peg$c99","peg$c101","peg$c103","peg$c109","peg$c117","peg$c119","peg$c121","peg$c124","peg$c126","peg$c128","peg$c131","peg$c133","peg$c135","peg$c138","peg$c140","peg$c142","peg$c144","peg$c146","peg$c149","peg$c152","peg$c154","peg$c156","peg$c158","peg$c161","peg$c165","peg$c167","peg$c170","peg$c172","peg$c175","peg$c177","peg$c183","peg$c186","peg$c188","peg$c190","peg$c193","peg$c195","peg$c200","peg$c202","peg$c205","peg$c207","peg$c210","peg$c212","peg$c214","peg$c222","peg$c224","peg$c226","peg$c228","peg$c230","peg$c233","peg$c235","peg$c237","peg$c239","peg$c241","peg$c243","peg$c245","peg$c247","peg$c249","peg$c251","peg$c253","peg$c255","peg$c257","peg$c259","peg$c261","peg$c263","peg$c265","peg$c267","peg$c269","peg$c271","peg$c276","peg$c278","peg$c286","peg$c288","peg$c290","peg$c303","peg$c309","unshift","forEach","tableInfo","table","as","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c314","peg$c315","peg$classExpectation","peg$c316","peg$c317","peg$c318","peg$c319","peg$c320","peg$c321","peg$c323","peg$c325","peg$c327","peg$c329","peg$c331","peg$c349","peg$c351","peg$c353","peg$c355","peg$c357","peg$c362","peg$c366","peg$c381","peg$c385","nk","peg$c388","peg$c390","peg$c392","peg$c394","peg$c396","peg$c398","peg$c406","peg$c408","peg$c411","peg$c413","peg$c415","peg$c425","reservedMap","peg$c429","peg$c430","peg$c431","peg$c432","chars","peg$c433","peg$c434","peg$c436","peg$c437","peg$c438","peg$c442","peg$c443","peg$c444","peg$c445","peg$c446","peg$c447","peg$c448","peg$c450","peg$c468","peg$c470","peg$c472","peg$c474","peg$c476","peg$c478","peg$c480","peg$c482","peg$c484","peg$c486","peg$c488","peg$c490","peg$c492","peg$c494","peg$c496","peg$c498","peg$c500","peg$c502","peg$c504","peg$c506","peg$c508","peg$c510","peg$c522","peg$c525","ca","toLowerCase","peg$c526","peg$c527","peg$c528","peg$c529","peg$c531","peg$c534","peg$c537","peg$c540","peg$c543","peg$c546","peg$c549","peg$c552","peg$c555","peg$c558","peg$c561","peg$c563","peg$c564","peg$c575","peg$c576","peg$c577","peg$c578","peg$c579","peg$c580","peg$c581","peg$c582","peg$c585","peg$c587","peg$c589","peg$c591","peg$c593","peg$c595","peg$c598","peg$c600","peg$c602","peg$c606","peg$c610","peg$c613","peg$c615","peg$c617","peg$c619","peg$c622","peg$c626","peg$c628","peg$c630","peg$c632","peg$c634","peg$c636","peg$c638","peg$c640","peg$c642","peg$c644","peg$c647","peg$c649","peg$c651","peg$c653","peg$c655","peg$c657","peg$c659","peg$c661","peg$c663","peg$c666","peg$c668","peg$c671","peg$c674","peg$c677","peg$c680","peg$c683","peg$c686","peg$c689","peg$c692","peg$c695","peg$c699","peg$c702","peg$c705","peg$c708","peg$c711","peg$c714","peg$c717","peg$c720","peg$c723","peg$c726","peg$c728","peg$c730","peg$c732","peg$c734","peg$c736","peg$c738","peg$c741","peg$c744","peg$c750","peg$c756","peg$c759","peg$c762","peg$c765","peg$c768","peg$c774","peg$c783","peg$c786","peg$c807","peg$c814","peg$c818","peg$c821","peg$c824","peg$c830","peg$c836","peg$c845","peg$c848","peg$c851","peg$c854","peg$c857","peg$c861","peg$c864","peg$c867","peg$c870","peg$c873","peg$c876","peg$c880","peg$c884","peg$c887","peg$c890","peg$c893","peg$c895","peg$c897","peg$c899","peg$c901","peg$c903","peg$c905","peg$c907","peg$c909","peg$c911","peg$c912","peg$c913","peg$c914","peg$c918","dataType","peg$c921","peg$c922","peg$c923","a","definition","anglebracket","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","ast","tableList","from","peg$c1","peg$parsemultiple_stmt","peg$parseunion_stmt","s9","s11","s13","s15","peg$parseKW_UPDATE","peg$parsetable_ref_list","peg$parseKW_SET","peg$parseset_list","peg$parsefrom_clause","peg$parsewhere_clause","peg$parseorder_by_clause","peg$parselimit_clause","f","w","or","lc","db","info","set","where","orderby","limit","peg$c2","peg$parseupdate_stmt","s17","peg$parsereplace_insert","peg$parseKW_INTO","peg$parsetable_name","peg$parseinsert_partition","peg$parseLPAREN","peg$parsecolumn","peg$parseCOMMA","peg$parsecolumn_list","peg$parseRPAREN","peg$parseinsert_value_clause","peg$parseon_duplicate_update_stmt","ri","v","odp","isArray","row","idx","values","partition","on_duplicate_update","peg$c4","peg$parsereplace_insert_stmt","peg$parseKW_IGNORE","ig","it","prefix","filter","map","peg$c5","peg$parseinsert_no_columns_stmt","peg$parseinsert_into_set","substr","peg$parseident_start","peg$parseKW_DELETE","tt","addition","peg$c3","peg$parsedelete_stmt","peg$parseKW_ANALYZE","peg$parseanalyze_stmt","peg$parseKW_ATTACH","peg$parseKW_DATABASE","peg$parseexpr","peg$parseKW_AS","peg$parseident","e","schema","database","expr","peg$parseattach_stmt","peg$parseKW_DROP","peg$parseKW_TABLE","keyword","peg$parseKW_INDEX","peg$parsecolumn_ref","peg$parseKW_ON","peg$parseALTER_ALGORITHM","peg$parseALTER_LOCK","peg$parsedrop_index_opt","op","peg$c32","peg$parsedrop_stmt","s14","s19","s21","peg$parseKW_CREATE","peg$parseKW_TEMPORARY","peg$parseKW_IF_NOT_EXISTS","s8","peg$parsecreate_definition","peg$parsecreate_table_definition","peg$parsecreate_constraint_definition","peg$parsetable_option","peg$parsetable_options","peg$parseKW_REPLACE","tp","ife","con","to","ir","qe","temporary","if_not_exists","ignore_replace","query_expr","create_definitions","constraint","table_options","peg$parsecreate_like_table","peg$parseKW_LIKE","peg$parsecreate_like_table_simple","parentheses","lt","like","peg$c66","peg$parsecreate_table_stmt","peg$parseKW_SCHEMA","peg$parseident_name","peg$parsecreate_option_character_set","peg$parsecreate_db_definition","peg$parsecreate_db_stmt","peg$parsecreate_stmt","peg$parseKW_TRUNCATE","kw","peg$parsetruncate_stmt","peg$parseKW_RENAME","peg$parsetable_to_item","peg$parsetable_to_list","tg","dt","peg$parserename_stmt","peg$parseKW_CALL","peg$parseproc_func_call","peg$parsecall_stmt","peg$parseKW_USE","peg$parseuse_stmt","peg$parseKW_ALTER","peg$parsealter_action","peg$parsealter_action_list","peg$parsealter_table_stmt","peg$parseKW_GLOBAL","peg$parseKW_SESSION","peg$parseKW_LOCAL","peg$parseKW_PERSIST","peg$parseKW_PERSIST_ONLY","peg$parseassign_stmt","peg$parseset_stmt","peg$parseKW_LOCK","peg$parseKW_TABLES","peg$parselock_table","peg$parselock_table_list","ltl","tables","peg$parselock_stmt","peg$parseKW_UNLOCK","peg$parseunlock_stmt","peg$parseKW_SHOW","suffix","peg$parsein_op_right","ins","in","peg$parselike_op_right","k","peg$c58","peg$parseKW_VAR__PRE_AT","peg$parseKW_USING","peg$parseshow_grant_for_using_list","peg$parseshow_grant_for_using","u","user","host","h","role_list","peg$parseshow_grant_for","for","peg$c72","peg$parseshow_grant_stmt","peg$parseshow_stmt","peg$parseKW_DESC","peg$parseKW_DESCRIBE","peg$parsedesc_stmt","peg$parsecmd_stmt","peg$parseproc_stmt","peg$parseproc_stmts","peg$parsecrud_stmt","varList","peg$parseKW_RETURN","peg$parseproc_expr","peg$parsereturn_stmt","stmt","vars","peg$parsevar_decl","peg$parsewithout_prefix_var_decl","peg$parseKW_ASSIGN","peg$parseKW_ASSIGIN_EQUAL","left","symbol","right","peg$parseselect_stmt","peg$parsejoin_op","peg$parseon_clause","ltable","rtable","on","peg$parseproc_join","peg$parseproc_additive_expr","peg$parseLBRAKE","peg$parseproc_primary_list","peg$parseRBRAKE","peg$parseproc_array","peg$parseproc_multiplicative_expr","peg$parseadditive_operator","peg$parseproc_primary","peg$parsemultiplicative_operator","peg$parseliteral","peg$parseparam","peg$parseproc_func_name","args","peg$c15","peg$parseset_item","tbl","peg$parseDOT","peg$parseadditive_expr","peg$parseKW_VALUES","peg$c21","peg$parseKW_INSERT","s10","peg$parseKW_PARTITION","peg$parsevalue_item","peg$parsevalue_list","peg$parsevalue_clause","peg$parseselect_stmt_nake","peg$parseKW_KEY","peg$parseKW_VAR__PRE_AT_AT","peg$parseKW_VAR_PRE_DOLLAR","peg$parseKW_VAR_PRE","peg$c75","peg$parsemem_chain","members","peg$parseexpr_list","resource","algorithm","lock","peg$parsecreate_column_definition","peg$parseindex_type","peg$parsecte_column_definition","peg$parseindex_options","id","index","index_type","index_options","peg$parsecreate_index_definition","peg$parseKW_FULLTEXT","peg$parseKW_SPATIAL","kc","peg$parsecreate_fulltext_spatial_index_definition","s12","df","co","cf","re","peg$parsedata_type","peg$parseKW_NOT_NULL","peg$parseliteral_not_null","peg$parseliteral_null","peg$parseKW_DEFAULT","peg$parsedefault_expr","peg$parsekeyword_comment","peg$parseKW_COLLATE","peg$parsecollate_expr","peg$c122","peg$parsecolumn_format","peg$parsestorage","peg$parsereference_definition","nullable","default_val","auto_increment","unique_or_primary","comment","collate","column_format","storage","reference_definition","peg$parsetable_base","peg$parselock_type","lock_type","peg$parseconstraint_name","de","constraint_type","peg$parsecreate_constraint_primary","peg$parseKW_UNIQUE","peg$parsecreate_constraint_unique","peg$parsecreate_constraint_foreign","nfr","peg$parsecreate_constraint_check","peg$parseKW_COMMENT","peg$parseliteral_string","od","ou","peg$parseKW_REFERENCES","peg$parseon_reference","match","on_delete","on_update","peg$parseliteral_numeric","peg$c150","peg$c159","peg$c162","peg$parsecreate_option_character_set_kw","peg$parseKW_ADD","peg$parseKW_COLUMN","cd","action","peg$parseALTER_ADD_COLUMN","peg$parseALTER_DROP_COLUMN","peg$parseKW_TO","tn","peg$parseALTER_RENAME_TABLE","peg$parseindex_option","result","peg$c197","kbs","peg$parseKW_KEY_BLOCK_SIZE","peg$c208","ro","peg$parsereference_option","peg$parseKW_CONSTRAINT","peg$parsewith_clause","cte","with","select","peg$parsequery_expr","peg$parseset_op","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","peg$c279","peg$parseunion_stmt_nake","_next","union","peg$c281","parentheses_symbol","peg$parseKW_WITH","peg$parsecte_definition","s16","s18","s20","s22","s24","s26","peg$parseKW_SELECT","peg$parse___","peg$parseKW_STRUCT","peg$parseKW_VALUE","peg$parsestruct_value","peg$parsecolumn_clause","peg$parsefor_sys_time_as_of","peg$parseKW_GROUP","peg$parseKW_BY","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","fs","g","win","as_struct_val","distinct","for_sys_time_as_of","groupby","having","window","peg$c284","peg$parseSTAR","peg$parsecolumns_list","expr_list","star","peg$parsecolumn_list_item","peg$parsecolumn_offset_expr","peg$parseKW_OFFSET","peg$parseKW_ORDINAL","pro","mid","peg$c299","peg$parsealias_clause","peg$parseexpr_alias","JSON","stringify","peg$c427","peg$parsequoted_ident","peg$parsealias_ident","peg$parsefrom_unnest_item","peg$parsewith_offset","with_offset","peg$parseKW_FROM","peg$parseKW_PIVOT","peg$parseaggr_func","el","peg$c452","peg$parseaggr_func_list","operator","in_expr","peg$parsepivot_operator","peg$parsetable_ref","using","peg$c312","alias","peg$c313","peg$parsetable_join","peg$parsetablesample","peg$parsenumber","test","charAt","peg$parsehint","ts","peg$c333","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_CROSS","peg$parseKW_INNER","peg$c338","project","obj","peg$c339","peg$c340","peg$parseor_and_where_expr","peg$parseKW_WHERE","peg$parseas_window_specification","as_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_AND","peg$parseKW_ROWS","peg$parsewindow_frame_following","peg$parsewindow_frame_preceding","peg$c360","peg$parsewindow_frame_clause","partitionby","window_frame_clause","peg$parsewindow_specification","window_specification","peg$parsewindow_frame_value","peg$parsewindow_frame_current_row","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_ASC","peg$c370","peg$parsenumber_or_param","peg$parseKW_LIMIT","i1","res","seperator","peg$c371","peg$c372","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseKW_OR","peg$parseor_expr","createUnaryExpr","peg$parseunary_expr","peg$parsearray_expr","peg$parseparentheses_expr","array_path","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral_list","peg$c374","peg$parseparentheses_list_expr","peg$c375","createBinaryExpr","peg$c379","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","rh","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c400","peg$parseis_op_right","peg$parsecomparison_op_right","peg$parsein_op","peg$parseKW_IN","peg$parselike_op","peg$c404","peg$parsemultiplicative_expr","list","peg$parseKW_CAST","target","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c514","scale","peg$c515","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c516","peg$parsecast_expr","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","field","cast_type","source","peg$c512","peg$parseextract_func","peg$parseover_partition","bc","over","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parseKW_SESSION_USER","peg$parsescalar_func","peg$c464","peg$parseon_update_current_timestamp","up","peg$c465","peg$parsefunc_call","peg$parseKW_CASE","peg$parsecase_when_then","peg$parsecase_else","peg$parseKW_END","condition_list","otherwise","peg$c419","peg$parsecase_expr","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$parseinterval_expr","peg$parseKW_WHEN","peg$parseKW_THEN","cond","peg$parseKW_ELSE","peg$c422","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$c424","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_COUNT","peg$parsestar_expr","peg$c461","peg$parsecount_arg","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$c455","peg$parseKW_OVER","peg$c466","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$parseKW_NULL","peg$c524","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c567","exp","peg$c568","peg$c569","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","field_name","field_type","peg$c917","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","tableName","newColumnsList","Set","keys","columnInfo","split","require","PARSER_NAME","DEFAULT_OPT","parserOpt","commonOptionConnector","opt","connector","str","createValueExpr","escape","getParserOpt","setParserOpt","topToSQL","percent","columnIdentifierToSql","ident","identifierToSql","isDual","commonTypeValue","toUpper","val","hasVal","literalToSQL","replaceParams","params","replaceParamsInner","onPartitionsToSQL","partitions","dataTypeToSQL","arrayStructTypeToSQL","dataTypeUpper","commentToSQL","triggerEventToSQL","events","event","eventKw","kwArgs","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","windowFrame","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","constructArgsList","consider_nulls","argsList","exprToSQL","isConsidernulls","fnName","isConsiderNullsInArgs","overToSQL","upperType","onUpdate","binaryToSQL","rstr","isBetween","castToSQL","expression","dataTypeSuffix","symbolChar","arrayDimension","array","arrayDimensionToSymbol","funcToSQL","args_parentheses","collateStr","overStr","separator","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","recursive","withExprStr","setToSQL","sets","clauses","setItem","valuesToSQL","selectToSQL","partitionToSQL","partitionArr","insertToSQL","onDuplicateUpdate","duplicateSet","tablesToSQL","operatorToSQL","sql","pivotOperatorToSQL","tableHintToSQL","tableHintExpr","index_columns","tableToSQL","unnestExpr","withOffset","unnestToSQL","prefixStr","tablesample","table_hint","schemaStr","valueSQL","valuesExpr","tableSampleSQL","repeatable","baseTable","joinExpr","tableOptionToSQL","tableOption","selectIntoToSQL","into","position","intoType","varToSQL","asStructVal","forSystem","lockingRead","locking_read","top","windowInfo","withInfo","distinctToSQL","columnsToSQL","intoSQL","getExprListSQL","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","userAndHost","role","showGrantsForUser","view","arrayStructValueToSQL","exprList","arrayPath","brackets","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","within_group_orderby","distinctSQL","withinGroup","window_func","assign","leftVar","rightVal","binary_expr","case","conditions","len","cast","column_ref","datatype","extract","castType","fulltext_search","against","matchExpr","againstExpr","asToSQL","function","insert","unionToSQL","interval","intervalExpr","show","struct","namedWindowExprInfo","varName","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","nulls","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","indexOptions","definitionSQL","constraintDefinitionToSQL","constraintDefinition","enforced","referenceDefinition","constraintSQL","columnReferenceDefinitionToSQL","array_index","arrows","properties","columnOffsetToSQL","number","arrow","columnDataType","reference","onDelete","columnOrder","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","characterSet","character_set","check","defaultOpt","autoIncrement","uniquePrimary","columnFormat","columnOption","asStr","getDual","columnsStr","has","columnToSQL","createDefinitionToSQL","indexSQL","createDefinition","firstAfter","first_after","ifNotExists","oldColumn","old_column","trim","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","execVariablesToSQL","unary_expr","unarExpr","space","typeToSQLFn","analyze","attach","tableOptions","ignoreReplace","queryExpr","likeType","likeTableName","createTableToSQL","constraintKw","constraint_kw","deferrable","execute","for_each","when","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","definer","sqlSecurity","sql_security","withClause","viewName","createViewToSQL","delete","exec","parameters","update","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","desc","unlock","fun","_orderby","_limit","unionKeyword","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","astToSQL","go","goToSQL","go_next","sqlItem","Parser","typeCase","parsers","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"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Y,EAASC,EAAUC,EAAoBsB,EAE/E1C,EAAKrB,IACLwB,EAAK4gB,QACM93B,GACJiX,OACMjX,GACJ8Z,OACM9Z,GACJiX,OACMjX,IACTqX,EAAK+E,QACMpc,GACJiX,OACMjX,GACJqc,OACMrc,GACJiX,OACMjX,IACTiY,EAAK0Q,QACM3oB,GACHiX,OACMjX,IACVkY,EAAMgC,QACMla,GACK+W,EAEfA,EADAG,EAv/eT,CACL7X,KAAM,OACNqd,KAq/e4BrF,EAp/e5BqN,OAAQ,KACRqT,OAm/egC9f,KA2CtCvC,GAAcqB,EACdA,EAAK/W,GAEH+W,IAAO/W,IACT+W,EAAKrB,IACLwB,EAAK4gB,QACM93B,GACJiX,OACMjX,GACJ8Z,OACM9Z,GACJiX,OACMjX,IACTqX,EAAK+E,QACMpc,GACJiX,OACMjX,GACJqc,OACMrc,GACJiX,OACMjX,IACTiY,EAAK+f,QACMh4B,GACHiX,OACMjX,IACVkY,EAAM4B,QACM9Z,GACJiX,OACMjX,IACVmY,EAAM8f,QACMj4B,GACJiX,OACMjX,GACJka,OACMla,GACJiX,OACMjX,IACVyZ,EAAMS,QACMla,GACK+W,EACfG,EAnkfvB,SAASqF,EAAG2b,GACnB,MAAO,CACL74B,KAAM,OACNqd,KAAMH,EACNmI,OAAQ,KACRqT,OAAQ,CACN5iB,SAAU,WAAa+iB,EAAY,MA6jfJC,CAAS9gB,EAAIc,GAClBpB,EAAKG,IAkErCxB,GAAcqB,EACdA,EAAK/W,GAEH+W,IAAO/W,IACT+W,EAAKrB,IACLwB,EAAK4gB,QACM93B,GACJiX,OACMjX,GACJ8Z,OACM9Z,GACJiX,OACMjX,IACTqX,EAAK+E,QACMpc,GACJiX,OACMjX,GACJqc,OACMrc,GACJiX,OACMjX,IACTiY,EAAK+f,QACMh4B,GACHiX,OACMjX,IACVkY,EAAM4B,QACM9Z,GACJiX,OACMjX,IACVmY,EAAM8f,QACMj4B,GACJiX,OACMjX,GACJga,OACMha,GACJiX,OACMjX,IACVyZ,EAAMwe,QACMj4B,GACJiX,OACMjX,GACJka,OACMla,GACJiX,OACMjX,GACJka,OA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","file":"bigquery.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = function(t, l, f, w, or, lc) {\n            if (t) t.forEach(tableInfo => {\n              const { db, as, table } = tableInfo\n              tableList.add(`update::${db}::${table}`)\n            });\n      \t  if(f) f.forEach(info => {\n              info.table && tableList.add(`update::${info.db}::${info.table}`);\n            });\n            if(l) {\n              l.forEach(col => columnList.add(`update::${col.table}::${col.column}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'update',\n                table: t,\n                set: l,\n                where: w,\n                orderby: or,\n                limit: lc,\n              }\n            };\n          },\n      peg$c3 = function(t, f, w, or, l) {\n            if(t) t.forEach(tt => tableList.add(`delete::${tt.db}::${tt.table}`));\n            if(f) f.forEach(info => {\n              info.table && tableList.add(`delete::${info.db}::${info.table}`);\n              columnList.add(`delete::${info.table}::(.*)`);\n            });\n            if (t === null && f.length === 1) {\n              const tableInfo = f[0]\n              t = [{\n                db: tableInfo.db,\n                table: tableInfo.table,\n                as: tableInfo.as,\n                addition: true\n              }]\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'delete',\n                table: t,\n                from: f,\n                where: w,\n                orderby: or,\n                limit: l,\n              }\n            };\n          },\n      peg$c4 = function(ri, t, p, c, v, odp) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              t.as = null\n            }\n            if (c) {\n              let table = t && t.table || null\n              if(Array.isArray(v)) {\n                v.forEach((row, idx) => {\n                  if(row.value.length != c.length) {\n                    throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)\n                  }\n                })\n              }\n              c.forEach(c => columnList.add(`insert::${table}::${c}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: c,\n                values: v,\n                partition: p,\n                on_duplicate_update: odp,\n              }\n            };\n          },\n      peg$c5 = function(ri, ig, it, t, p, v, odp) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            const prefix = [ig, it].filter(v => v).map(v => v[0] && v[0].toLowerCase()).join(' ')\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                values: v,\n                partition: p,\n                prefix,\n                on_duplicate_update: odp,\n              }\n            };\n          },\n      peg$c6 = function(ri, t, p, l, odp) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                partition: p,\n                set: l,\n                on_duplicate_update: odp,\n              }\n            };\n          },\n      peg$c7 = function() { varList = []; return true; },\n      peg$c8 = function(s) {\n            return { stmt: s, vars: varList };\n          },\n      peg$c9 = function(va, s, e) {\n          return {\n            type: 'assign',\n            left: va,\n            symbol: s,\n            right: e\n          };\n        },\n      peg$c10 = function(e) {\n            return { type: 'return', expr: e };\n          },\n      peg$c11 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c12 = function(lt, op, rt, expr) {\n            return {\n              type: 'join',\n              ltable: lt,\n              rtable: rt,\n              op: op,\n              on: expr\n            };\n          },\n      peg$c13 = function(e) {\n            e.parentheses = true;\n            return e;\n          },\n      peg$c14 = function(name, l) {\n            //compatible with original func_call\n            return {\n              type: 'function',\n              name: name,\n              args: {\n                type: 'expr_list',\n                value: l\n              }\n            };\n          },\n      peg$c15 = function(name) {\n          return {\n              type: 'function',\n              name: name,\n              args: null\n            };\n        },\n      peg$c16 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c17 = function(l) {\n          return { type: 'array', value: l };\n        },\n      peg$c18 = \"=\",\n      peg$c19 = peg$literalExpectation(\"=\", false),\n      peg$c20 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0] };\n        },\n      peg$c21 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n        },\n      peg$c22 = function() { return 'insert'; },\n      peg$c23 = function() { return 'replace'; },\n      peg$c24 = function(head, tail) {\n            return createList(head, tail)\n          },\n      peg$c25 = function(v) {\n          return v\n        },\n      peg$c26 = \"duplicate\",\n      peg$c27 = peg$literalExpectation(\"DUPLICATE\", true),\n      peg$c28 = function(s) {\n          return {\n            keyword: 'on duplicate key update',\n            set: s\n          }\n        },\n      peg$c29 = function(a, t) {\n            tableList.add(`${a}::${t.db}::${t.table}`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                table: t\n              }\n            };\n          },\n      peg$c30 = function(a, db, e, as, schema) {\n            // tableList.add(`${a}::${t.db}::${t.table}`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                database: db,\n                expr: e,\n                as: as && as[0].toLowerCase(),\n                schema,\n              }\n            };\n          },\n      peg$c31 = function(a, r, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: t\n              }\n            };\n          },\n      peg$c32 = function(a, r, i, t, op) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: i,\n                table: t,\n                options: op\n              }\n            };\n          },\n      peg$c33 = function(a, kw, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: kw && kw.toLowerCase() || 'table',\n                name: t\n              }\n            };\n          },\n      peg$c34 = function(t) {\n            t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'rename',\n                table: t\n              }\n            };\n          },\n      peg$c35 = function(e) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'call',\n              expr: e\n            }\n          }\n        },\n      peg$c36 = function(d) {\n            tableList.add(`use::${d}::null`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'use',\n                db: d\n              }\n            };\n          },\n      peg$c37 = function(kw, a) {\n          a.keyword = kw\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'set',\n              expr: a\n            }\n          }\n        },\n      peg$c38 = function(ltl) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'lock',\n              keyword: 'tables',\n              tables: ltl\n            }\n          }\n        },\n      peg$c39 = function() {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'unlock',\n              keyword: 'tables'\n            }\n          }\n        },\n      peg$c40 = \"binary\",\n      peg$c41 = peg$literalExpectation(\"BINARY\", true),\n      peg$c42 = \"master\",\n      peg$c43 = peg$literalExpectation(\"MASTER\", true),\n      peg$c44 = \"logs\",\n      peg$c45 = peg$literalExpectation(\"LOGS\", true),\n      peg$c46 = function(t) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              suffix: 'logs',\n              keyword: t.toLowerCase()\n            }\n          }\n        },\n      peg$c47 = \"binlog\",\n      peg$c48 = peg$literalExpectation(\"BINLOG\", true),\n      peg$c49 = \"events\",\n      peg$c50 = peg$literalExpectation(\"EVENTS\", true),\n      peg$c51 = function(ins, from, limit) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              suffix: 'events',\n              keyword: 'binlog',\n              in: ins,\n              from,\n              limit,\n            }\n          }\n        },\n      peg$c52 = \"character\",\n      peg$c53 = peg$literalExpectation(\"CHARACTER\", true),\n      peg$c54 = \"set\",\n      peg$c55 = peg$literalExpectation(\"SET\", true),\n      peg$c56 = \"collation\",\n      peg$c57 = peg$literalExpectation(\"COLLATION\", true),\n      peg$c58 = function(k, e) {\n          let keyword = Array.isArray(k) && k || [k]\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              suffix: keyword[2] && keyword[2].toLowerCase(),\n              keyword: keyword[0].toLowerCase(),\n              expr: e\n            }\n          }\n        },\n      peg$c59 = function(t) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'desc',\n              table: t\n            }\n          };\n        },\n      peg$c60 = function(p, d) {\n          //push for analysis\n          return {\n            type: 'var',\n            ...d,\n            prefix: p\n          };\n        },\n      peg$c61 = function(name, m) {\n          //push for analysis\n          varList.push(name);\n          return {\n            type: 'var',\n            name: name,\n            members: m,\n            prefix: null,\n          };\n        },\n      peg$c62 = function(l) {\n            return l;\n          },\n      peg$c63 = function(l) { return l; },\n      peg$c64 = function(head, tail) {\n          return createList(head, tail, 1)\n        },\n      peg$c65 = function(a, tp, ife, t, c, con, to, ir, as, qe) {\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists: ife && ife[0].toLowerCase(),\n                table: t,\n                ignore_replace: ir && ir[0].toLowerCase(),\n                as: as && as[0].toLowerCase(),\n                query_expr: qe && qe.ast,\n                create_definitions: c,\n      \t\t      constraint : con,\n                table_options: to\n              }\n            }\n          },\n      peg$c66 = function(a, tp, ife, t, lt) {\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists: ife && ife[0].toLowerCase(),\n                table: t,\n                like: lt\n              }\n            }\n          },\n      peg$c67 = function(a, k, ife, t, c) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'database',\n                if_not_exists: ife && ife[0].toLowerCase(),\n                database: t,\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c68 = function(t, e) {\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                table: t,\n                expr: e\n              }\n            };\n          },\n      peg$c69 = function(head, tail) {\n          return createList(head, tail);\n        },\n      peg$c70 = \"grants\",\n      peg$c71 = peg$literalExpectation(\"GRANTS\", true),\n      peg$c72 = function(f) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              keyword: 'grants',\n              for: f,\n            }\n          }\n        },\n      peg$c73 = \".\",\n      peg$c74 = peg$literalExpectation(\".\", false),\n      peg$c75 = function(l) {\n          const s = [];\n          for (let i = 0; i < l.length; i++) {\n            s.push(l[i][1]);\n          }\n          return s;\n        },\n      peg$c76 = \"algorithm\",\n      peg$c77 = peg$literalExpectation(\"ALGORITHM\", true),\n      peg$c78 = \"default\",\n      peg$c79 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c80 = \"instant\",\n      peg$c81 = peg$literalExpectation(\"INSTANT\", true),\n      peg$c82 = \"inplace\",\n      peg$c83 = peg$literalExpectation(\"INPLACE\", true),\n      peg$c84 = \"copy\",\n      peg$c85 = peg$literalExpectation(\"COPY\", true),\n      peg$c86 = function(s, val) {\n          return {\n            type: 'alter',\n            keyword: 'algorithm',\n            resource: 'algorithm',\n            symbol: s,\n            algorithm: val\n          }\n        },\n      peg$c87 = \"lock\",\n      peg$c88 = peg$literalExpectation(\"LOCK\", true),\n      peg$c89 = \"none\",\n      peg$c90 = peg$literalExpectation(\"NONE\", true),\n      peg$c91 = \"shared\",\n      peg$c92 = peg$literalExpectation(\"SHARED\", true),\n      peg$c93 = \"exclusive\",\n      peg$c94 = peg$literalExpectation(\"EXCLUSIVE\", true),\n      peg$c95 = function(s, val) {\n          return {\n            type: 'alter',\n            keyword: 'lock',\n            resource: 'lock',\n            symbol: s,\n            lock: val\n          }\n        },\n      peg$c96 = \"auto_increment\",\n      peg$c97 = peg$literalExpectation(\"AUTO_INCREMENT\", true),\n      peg$c98 = \"unique\",\n      peg$c99 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c100 = \"primary\",\n      peg$c101 = peg$literalExpectation(\"PRIMARY\", true),\n      peg$c102 = \"key\",\n      peg$c103 = peg$literalExpectation(\"KEY\", true),\n      peg$c104 = function(c, d, n, df, a, u, co, ca, cf, s, re) {\n            columnList.add(`create::${c.table}::${c.column}`)\n            if (n && !n.value) n.value = 'null'\n            return {\n              column: c,\n              definition: d,\n              nullable: n,\n              default_val: df,\n              auto_increment: a && a.toLowerCase(),\n              unique_or_primary: u && `${u[0].toLowerCase()} ${u[2].toLowerCase()}`,\n              comment: co,\n              collate: ca,\n              column_format: cf,\n              storage:s,\n              reference_definition: re,\n              resource: 'column'\n            }\n          },\n      peg$c105 = function(head, tail) {\n          return createList(head, tail)\n        },\n      peg$c106 = function(e) {\n            e.parentheses = true;\n            return e;\n        },\n      peg$c107 = function(t, lt) {\n          tableList.add(`lock::${t.db}::${t.table}`)\n          return {\n            table: t,\n            lock_type: lt\n          }\n        },\n      peg$c108 = \"for\",\n      peg$c109 = peg$literalExpectation(\"FOR\", true),\n      peg$c110 = function(n, h, u) {\n          return {\n            user: n,\n            host: h && h[2],\n            role_list: u\n          }\n        },\n      peg$c111 = function(kc, c, t, de, id) {\n            return {\n              index: c,\n              definition: de,\n              keyword: kc.toLowerCase(),\n              index_type: t,\n              resource: 'index',\n              index_options: id,\n            }\n          },\n      peg$c112 = function(p, kc, c, de, id) {\n            return {\n              index: c,\n              definition: de,\n              keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n              index_options: id,\n              resource: 'index',\n            }\n          },\n      peg$c113 = function(ce) {\n          return {\n            type: 'default',\n            value: ce\n          }\n        },\n      peg$c114 = function(k, s, c) {\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            symbol: s,\n            value: c,\n          }\n        },\n      peg$c115 = function(s, ca) {\n          return {\n            type: 'collate',\n            symbol: s,\n            value: ca,\n          }\n        },\n      peg$c116 = \"column_format\",\n      peg$c117 = peg$literalExpectation(\"COLUMN_FORMAT\", true),\n      peg$c118 = \"fixed\",\n      peg$c119 = peg$literalExpectation(\"FIXED\", true),\n      peg$c120 = \"dynamic\",\n      peg$c121 = peg$literalExpectation(\"DYNAMIC\", true),\n      peg$c122 = function(k, f) {\n          return {\n            type: 'column_format',\n            value: f.toLowerCase()\n          }\n        },\n      peg$c123 = \"storage\",\n      peg$c124 = peg$literalExpectation(\"STORAGE\", true),\n      peg$c125 = \"disk\",\n      peg$c126 = peg$literalExpectation(\"DISK\", true),\n      peg$c127 = \"memory\",\n      peg$c128 = peg$literalExpectation(\"MEMORY\", true),\n      peg$c129 = function(k, s) {\n          return {\n            type: 'storage',\n            value: s.toLowerCase()\n          }\n        },\n      peg$c130 = \"match full\",\n      peg$c131 = peg$literalExpectation(\"MATCH FULL\", true),\n      peg$c132 = \"match partial\",\n      peg$c133 = peg$literalExpectation(\"MATCH PARTIAL\", true),\n      peg$c134 = \"match simple\",\n      peg$c135 = peg$literalExpectation(\"MATCH SIMPLE\", true),\n      peg$c136 = function(kc, t, de, m, od, ou) {\n          return {\n              definition: de,\n              table: t,\n              keyword: kc.toLowerCase(),\n              match:m && m.toLowerCase(),\n              on_delete: od,\n              on_update: ou,\n            }\n        },\n      peg$c137 = \"avg_row_length\",\n      peg$c138 = peg$literalExpectation(\"AVG_ROW_LENGTH\", true),\n      peg$c139 = \"key_block_size\",\n      peg$c140 = peg$literalExpectation(\"KEY_BLOCK_SIZE\", true),\n      peg$c141 = \"max_rows\",\n      peg$c142 = peg$literalExpectation(\"MAX_ROWS\", true),\n      peg$c143 = \"min_rows\",\n      peg$c144 = peg$literalExpectation(\"MIN_ROWS\", true),\n      peg$c145 = \"stats_sample_pages\",\n      peg$c146 = peg$literalExpectation(\"STATS_SAMPLE_PAGES\", true),\n      peg$c147 = function(kw, s, v) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.value\n          }\n        },\n      peg$c148 = \"connection\",\n      peg$c149 = peg$literalExpectation(\"CONNECTION\", true),\n      peg$c150 = function(kw, s, c) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: `'${c.value}'`\n          }\n        },\n      peg$c151 = \"compression\",\n      peg$c152 = peg$literalExpectation(\"COMPRESSION\", true),\n      peg$c153 = \"'\",\n      peg$c154 = peg$literalExpectation(\"'\", false),\n      peg$c155 = \"zlib\",\n      peg$c156 = peg$literalExpectation(\"ZLIB\", true),\n      peg$c157 = \"lz4\",\n      peg$c158 = peg$literalExpectation(\"LZ4\", true),\n      peg$c159 = function(kw, s, v) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.join('').toUpperCase()\n          }\n        },\n      peg$c160 = \"engine\",\n      peg$c161 = peg$literalExpectation(\"ENGINE\", true),\n      peg$c162 = function(kw, s, c) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: c.toUpperCase()\n          }\n        },\n      peg$c163 = function(t) {\n          return {\n            type: 'like',\n            table: t\n          }\n        },\n      peg$c164 = \"charset\",\n      peg$c165 = peg$literalExpectation(\"CHARSET\", true),\n      peg$c166 = \"collate\",\n      peg$c167 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c168 = function(kw, t, s, v) {\n          return {\n            keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n            symbol: s,\n            value: v\n          }\n        },\n      peg$c169 = \"read\",\n      peg$c170 = peg$literalExpectation(\"READ\", true),\n      peg$c171 = \"local\",\n      peg$c172 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c173 = function(s) {\n          return {\n            type: 'read',\n            suffix: s && 'local'\n          }\n        },\n      peg$c174 = \"low_priority\",\n      peg$c175 = peg$literalExpectation(\"LOW_PRIORITY\", true),\n      peg$c176 = \"write\",\n      peg$c177 = peg$literalExpectation(\"WRITE\", true),\n      peg$c178 = function(p) {\n          return {\n            type: 'write',\n            prefix: p && 'low_priority'\n          }\n        },\n      peg$c179 = function(l) {\n          return l\n        },\n      peg$c180 = function(kc, p, t, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: `${p[0].toLowerCase()} ${p[2].toLowerCase()}`,\n              keyword: kc && kc.keyword,\n              index_type: t,\n              resource: 'constraint',\n              index_options: id,\n            }\n        },\n      peg$c181 = function(kc, u, p, i, t, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              index: i,\n              resource: 'constraint',\n              index_options: id\n            }\n        },\n      peg$c182 = \"foreign key\",\n      peg$c183 = peg$literalExpectation(\"FOREIGN KEY\", true),\n      peg$c184 = function(kc, p, i, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p,\n              keyword: kc && kc.keyword,\n              index: i,\n              resource: 'constraint',\n              reference_definition: id\n            }\n        },\n      peg$c185 = \"check\",\n      peg$c186 = peg$literalExpectation(\"CHECK\", true),\n      peg$c187 = \"not\",\n      peg$c188 = peg$literalExpectation(\"NOT\", true),\n      peg$c189 = \"replication\",\n      peg$c190 = peg$literalExpectation(\"REPLICATION\", true),\n      peg$c191 = function(kc, u, nfr, c) {\n          return {\n              constraint_type: u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              constraint: kc && kc.constraint,\n              index_type: nfr && { keyword: 'not for replication' },\n              definition: [c],\n              resource: 'constraint',\n            }\n        },\n      peg$c192 = \"btree\",\n      peg$c193 = peg$literalExpectation(\"BTREE\", true),\n      peg$c194 = \"hash\",\n      peg$c195 = peg$literalExpectation(\"HASH\", true),\n      peg$c196 = function(t) {\n          return {\n            keyword: 'using',\n            type: t.toLowerCase(),\n          }\n        },\n      peg$c197 = function(head, tail) {\n          const result = [head];\n          for (let i = 0; i < tail.length; i++) {\n            result.push(tail[i][1]);\n          }\n          return result;\n        },\n      peg$c198 = function(k, e, kbs) {\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: kbs\n          };\n        },\n      peg$c199 = \"with\",\n      peg$c200 = peg$literalExpectation(\"WITH\", true),\n      peg$c201 = \"parser\",\n      peg$c202 = peg$literalExpectation(\"PARSER\", true),\n      peg$c203 = function(pn) {\n          return {\n            type: 'with parser',\n            expr: pn\n          }\n        },\n      peg$c204 = \"visible\",\n      peg$c205 = peg$literalExpectation(\"VISIBLE\", true),\n      peg$c206 = \"invisible\",\n      peg$c207 = peg$literalExpectation(\"INVISIBLE\", true),\n      peg$c208 = function(k) {\n          return {\n            type: k.toLowerCase(),\n            expr: k.toLowerCase()\n          }\n        },\n      peg$c209 = \"on\",\n      peg$c210 = peg$literalExpectation(\"ON\", true),\n      peg$c211 = \"delete\",\n      peg$c212 = peg$literalExpectation(\"DELETE\", true),\n      peg$c213 = \"update\",\n      peg$c214 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c215 = function(on_kw, kw, ro) {\n          return {\n            type: `${on_kw.toLowerCase()} ${kw.toLowerCase()}`,\n            value: ro\n          }\n        },\n      peg$c216 = function() {\n          return 'CHARACTER SET'\n        },\n      peg$c217 = function(kc, cd) {\n            return {\n              action: 'add',\n              ...cd,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c218 = function(kc, c) {\n            return {\n              action: 'drop',\n              column: c,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c219 = function(kw, tn) {\n          return {\n            action: 'rename',\n            type: 'alter',\n            resource: 'table',\n            keyword: kw && kw[0].toLowerCase(),\n            table: tn\n          }\n        },\n      peg$c220 = function(kc, c) {\n          return {\n            keyword: kc.toLowerCase(),\n            constraint: c\n          }\n        },\n      peg$c221 = \"restrict\",\n      peg$c222 = peg$literalExpectation(\"RESTRICT\", true),\n      peg$c223 = \"cascade\",\n      peg$c224 = peg$literalExpectation(\"CASCADE\", true),\n      peg$c225 = \"set null\",\n      peg$c226 = peg$literalExpectation(\"SET NULL\", true),\n      peg$c227 = \"no action\",\n      peg$c228 = peg$literalExpectation(\"NO ACTION\", true),\n      peg$c229 = \"set default\",\n      peg$c230 = peg$literalExpectation(\"SET DEFAULT\", true),\n      peg$c231 = function(kc) {\n          return kc.toLowerCase()\n        },\n      peg$c232 = \"create\",\n      peg$c233 = peg$literalExpectation(\"CREATE\", true),\n      peg$c234 = \"insert\",\n      peg$c235 = peg$literalExpectation(\"INSERT\", true),\n      peg$c236 = \":=\",\n      peg$c237 = peg$literalExpectation(\":=\", false),\n      peg$c238 = \"return\",\n      peg$c239 = peg$literalExpectation(\"return\", true),\n      peg$c240 = \"replace\",\n      peg$c241 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c242 = \"analyze\",\n      peg$c243 = peg$literalExpectation(\"ANALYZE\", true),\n      peg$c244 = \"attach\",\n      peg$c245 = peg$literalExpectation(\"ATTACH\", true),\n      peg$c246 = \"database\",\n      peg$c247 = peg$literalExpectation(\"DATABASE\", true),\n      peg$c248 = \"rename\",\n      peg$c249 = peg$literalExpectation(\"RENAME\", true),\n      peg$c250 = \"show\",\n      peg$c251 = peg$literalExpectation(\"SHOW\", true),\n      peg$c252 = \"describe\",\n      peg$c253 = peg$literalExpectation(\"DESCRIBE\", true),\n      peg$c254 = \"@\",\n      peg$c255 = peg$literalExpectation(\"@\", false),\n      peg$c256 = \"@@\",\n      peg$c257 = peg$literalExpectation(\"@@\", false),\n      peg$c258 = \"$\",\n      peg$c259 = peg$literalExpectation(\"$\", false),\n      peg$c260 = \"temporary\",\n      peg$c261 = peg$literalExpectation(\"TEMPORARY\", true),\n      peg$c262 = \"schema\",\n      peg$c263 = peg$literalExpectation(\"SCHEMA\", true),\n      peg$c264 = \"alter\",\n      peg$c265 = peg$literalExpectation(\"ALTER\", true),\n      peg$c266 = \"spatial\",\n      peg$c267 = peg$literalExpectation(\"SPATIAL\", true),\n      peg$c268 = \"(\",\n      peg$c269 = peg$literalExpectation(\"(\", false),\n      peg$c270 = \")\",\n      peg$c271 = peg$literalExpectation(\")\", false),\n      peg$c272 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c273 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c274 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c275 = \"intersect\",\n      peg$c276 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c277 = \"except\",\n      peg$c278 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c279 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c280 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c281 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c282 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c283 = function(name, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt };\n        },\n      peg$c284 = function(cte, sv, d, c, f, fs, w, g, h, o, l, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                with: cte,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l,\n                window:win,\n            };\n        },\n      peg$c285 = \"system_time\",\n      peg$c286 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c287 = \"as\",\n      peg$c288 = peg$literalExpectation(\"AS\", true),\n      peg$c289 = \"of\",\n      peg$c290 = peg$literalExpectation(\"OF\", true),\n      peg$c291 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c292 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c293 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c294 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c295 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c296 = function(c) {\n          return c\n        },\n      peg$c297 = function(n, t, l) {\n          return {\n            expr: n,\n            offset: `[${t}(${l.value})]`\n          }\n        },\n      peg$c298 = function(tbl) {\n            columnList.add('select::null::(.*)');\n            return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c299 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`)\n            let column = '*'\n            const mid = pro && pro[0]\n            if (typeof mid === 'string') column = `${mid}.*`\n            if (mid && mid.expr && mid.offset) column = { ...mid, suffix: '.*' }\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column,\n              },\n              as: null\n            }\n          },\n      peg$c300 = function(c, as) {\n          return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: c\n              },\n              as: as\n            }\n        },\n      peg$c301 = function(i) { return i; },\n      peg$c302 = \"unnest\",\n      peg$c303 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c304 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c305 = function(l, op) {\n          if (l[0]) l[0].operator = op\n          return l\n        },\n      peg$c306 = function(a, c, i, as) {\n          i.operator = '='\n          return {\n            'type': 'pivot',\n            'expr': a,\n            column: c,\n            in_expr: i,\n            as,\n          }\n        },\n      peg$c307 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c308 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c309 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c310 = function(t) { return t; },\n      peg$c311 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c312 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c313 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c314 = /^[@]/,\n      peg$c315 = peg$classExpectation([\"@\"], false, false),\n      peg$c316 = /^[{]/,\n      peg$c317 = peg$classExpectation([\"{\"], false, false),\n      peg$c318 = /^[=]/,\n      peg$c319 = peg$classExpectation([\"=\"], false, false),\n      peg$c320 = /^[}]/,\n      peg$c321 = peg$classExpectation([\"}\"], false, false),\n      peg$c322 = \"tablesample\",\n      peg$c323 = peg$literalExpectation(\"TABLESAMPLE\", true),\n      peg$c324 = \"bernoulli\",\n      peg$c325 = peg$literalExpectation(\"BERNOULLI\", true),\n      peg$c326 = \"reservoir\",\n      peg$c327 = peg$literalExpectation(\"RESERVOIR\", true),\n      peg$c328 = \"percent\",\n      peg$c329 = peg$literalExpectation(\"PERCENT\", true),\n      peg$c330 = \"rows\",\n      peg$c331 = peg$literalExpectation(\"ROWS\", true),\n      peg$c332 = function(t, ht, ts, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            }\n            return {\n              db: t.db,\n              table: t.table,\n              as: alias\n            };\n          },\n      peg$c333 = function(stmt, ts, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c334 = function() { return 'LEFT JOIN'; },\n      peg$c335 = function() { return 'RIGHT JOIN'; },\n      peg$c336 = function() { return 'FULL JOIN'; },\n      peg$c337 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c338 = function(k) { return k ? `${k[0].toUpperCase()} JOIN` : 'JOIN'; },\n      peg$c339 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c340 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c341 = function(e) { return e; },\n      peg$c342 = function(e) { return e.value; },\n      peg$c343 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c344 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c345 = function(n) { return n },\n      peg$c346 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c347 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c348 = \"range\",\n      peg$c349 = peg$literalExpectation(\"RANGE\", true),\n      peg$c350 = \"unbounded\",\n      peg$c351 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c352 = \"preceding\",\n      peg$c353 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c354 = \"current\",\n      peg$c355 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c356 = \"ROW\",\n      peg$c357 = peg$literalExpectation(\"ROW\", false),\n      peg$c358 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c359 = function(kw, s) {\n          // => string\n          return `rows ${s.value}`\n        },\n      peg$c360 = function(p, f) {\n          // => string\n          return `rows between ${p.value} and ${f.value}`\n        },\n      peg$c361 = \"following\",\n      peg$c362 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c363 = function(s) {\n          // => string\n          s.value += ' FOLLOWING'\n          return s\n        },\n      peg$c364 = function(s) {\n          // => string\n          s.value += ' PRECEDING'\n          return s\n        },\n      peg$c365 = \"row\",\n      peg$c366 = peg$literalExpectation(\"ROW\", true),\n      peg$c367 = function() {\n          // => { type: 'single_quote_string'; value: string }\n          return { type: 'single_quote_string', value: 'current row' }\n        },\n      peg$c368 = function(s) {\n          // => literal_string\n          return { type: 'single_quote_string', value: s.toUpperCase() }\n        },\n      peg$c369 = function(bc) { return bc; },\n      peg$c370 = function(e, c, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c371 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c372 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c373 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c374 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c375 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c376 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c377 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c378 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c379 = function(head, tail) {\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < tail.length; i++) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' };\n            el.value = result\n            return el\n          }\n          return result;\n        },\n      peg$c380 = \"!\",\n      peg$c381 = peg$literalExpectation(\"!\", false),\n      peg$c382 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c383 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c384 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c385 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c386 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c387 = \">=\",\n      peg$c388 = peg$literalExpectation(\">=\", false),\n      peg$c389 = \">\",\n      peg$c390 = peg$literalExpectation(\">\", false),\n      peg$c391 = \"<=\",\n      peg$c392 = peg$literalExpectation(\"<=\", false),\n      peg$c393 = \"<>\",\n      peg$c394 = peg$literalExpectation(\"<>\", false),\n      peg$c395 = \"<\",\n      peg$c396 = peg$literalExpectation(\"<\", false),\n      peg$c397 = \"!=\",\n      peg$c398 = peg$literalExpectation(\"!=\", false),\n      peg$c399 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c400 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c401 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c402 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c403 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c404 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c405 = \"+\",\n      peg$c406 = peg$literalExpectation(\"+\", false),\n      peg$c407 = \"-\",\n      peg$c408 = peg$literalExpectation(\"-\", false),\n      peg$c409 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c410 = \"*\",\n      peg$c411 = peg$literalExpectation(\"*\", false),\n      peg$c412 = \"/\",\n      peg$c413 = peg$literalExpectation(\"/\", false),\n      peg$c414 = \"%\",\n      peg$c415 = peg$literalExpectation(\"%\", false),\n      peg$c416 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c417 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c418 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c419 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c420 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c421 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c422 = function(schema, tbl, col) {\n            const columns = col.map(c => c[3]).join('.') || null\n            columnList.add(`select::${schema}.${tbl[3]}::${col[0][3]}`);\n            return {\n              type: 'column_ref',\n              schema: schema,\n              table: tbl[3],\n              column: columns\n            };\n          },\n      peg$c423 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c424 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c425 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c426 = function(name) {\n            return name;\n          },\n      peg$c427 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c428 = \"\\\"\",\n      peg$c429 = peg$literalExpectation(\"\\\"\", false),\n      peg$c430 = /^[^\"]/,\n      peg$c431 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c432 = function(chars) { return chars.join(''); },\n      peg$c433 = /^[^']/,\n      peg$c434 = peg$classExpectation([\"'\"], true, false),\n      peg$c435 = \"`\",\n      peg$c436 = peg$literalExpectation(\"`\", false),\n      peg$c437 = /^[^`]/,\n      peg$c438 = peg$classExpectation([\"`\"], true, false),\n      peg$c439 = function(chars) { return `\\`${chars.join('')}\\``; },\n      peg$c440 = function(name) {\n          return name;\n        },\n      peg$c441 = function(name) { return name; },\n      peg$c442 = function(start, parts) { return start + parts.join(''); },\n      peg$c443 = /^[A-Za-z_]/,\n      peg$c444 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c445 = /^[A-Za-z0-9_\\-]/,\n      peg$c446 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c447 = /^[A-Za-z0-9_:]/,\n      peg$c448 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c449 = \":\",\n      peg$c450 = peg$literalExpectation(\":\", false),\n      peg$c451 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c452 = function(head, as, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n        },\n      peg$c453 = function(name, e, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              },\n              over: bc,\n            };\n          },\n      peg$c454 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c455 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c456 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c457 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c458 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c459 = function(e) { return { expr: e }; },\n      peg$c460 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c461 = function(d, c, or) {  return { distinct: d, expr: c, orderby: or, parentheses: true }; },\n      peg$c462 = function() { return { type: 'star', value: '*' }; },\n      peg$c463 = function(name, l, bc) {\n          if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c464 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c465 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c466 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              tail.forEach(t => name = `${name}.${t[3]}`)\n            }\n            return name;\n          },\n      peg$c467 = \"century\",\n      peg$c468 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c469 = \"day\",\n      peg$c470 = peg$literalExpectation(\"DAY\", true),\n      peg$c471 = \"date\",\n      peg$c472 = peg$literalExpectation(\"DATE\", true),\n      peg$c473 = \"decade\",\n      peg$c474 = peg$literalExpectation(\"DECADE\", true),\n      peg$c475 = \"dow\",\n      peg$c476 = peg$literalExpectation(\"DOW\", true),\n      peg$c477 = \"doy\",\n      peg$c478 = peg$literalExpectation(\"DOY\", true),\n      peg$c479 = \"epoch\",\n      peg$c480 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c481 = \"hour\",\n      peg$c482 = peg$literalExpectation(\"HOUR\", true),\n      peg$c483 = \"isodow\",\n      peg$c484 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c485 = \"isoyear\",\n      peg$c486 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c487 = \"microseconds\",\n      peg$c488 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c489 = \"millennium\",\n      peg$c490 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c491 = \"milliseconds\",\n      peg$c492 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c493 = \"minute\",\n      peg$c494 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c495 = \"month\",\n      peg$c496 = peg$literalExpectation(\"MONTH\", true),\n      peg$c497 = \"quarter\",\n      peg$c498 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c499 = \"second\",\n      peg$c500 = peg$literalExpectation(\"SECOND\", true),\n      peg$c501 = \"timezone\",\n      peg$c502 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c503 = \"timezone_hour\",\n      peg$c504 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c505 = \"timezone_minute\",\n      peg$c506 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c507 = \"week\",\n      peg$c508 = peg$literalExpectation(\"WEEK\", true),\n      peg$c509 = \"year\",\n      peg$c510 = peg$literalExpectation(\"YEAR\", true),\n      peg$c511 = function() {\n          return f\n        },\n      peg$c512 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c513 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c514 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c515 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c516 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c517 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c518 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c519 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c520 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c521 = \"r\",\n      peg$c522 = peg$literalExpectation(\"R\", true),\n      peg$c523 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c524 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c525 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c526 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c527 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c528 = /^[^'\\\\]/,\n      peg$c529 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c530 = \"\\\\'\",\n      peg$c531 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c532 = function() { return \"\\\\'\";  },\n      peg$c533 = \"\\\\\\\"\",\n      peg$c534 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c535 = function() { return '\\\\\"';  },\n      peg$c536 = \"\\\\\\\\\",\n      peg$c537 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c538 = function() { return \"\\\\\\\\\"; },\n      peg$c539 = \"\\\\/\",\n      peg$c540 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c541 = function() { return \"\\\\/\";  },\n      peg$c542 = \"\\\\b\",\n      peg$c543 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c544 = function() { return \"\\b\"; },\n      peg$c545 = \"\\\\f\",\n      peg$c546 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c547 = function() { return \"\\f\"; },\n      peg$c548 = \"\\\\n\",\n      peg$c549 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c550 = function() { return \"\\n\"; },\n      peg$c551 = \"\\\\r\",\n      peg$c552 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c553 = function() { return \"\\r\"; },\n      peg$c554 = \"\\\\t\",\n      peg$c555 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c556 = function() { return \"\\t\"; },\n      peg$c557 = \"\\\\u\",\n      peg$c558 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c559 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c560 = \"\\\\\",\n      peg$c561 = peg$literalExpectation(\"\\\\\", false),\n      peg$c562 = function() { return \"\\\\\"; },\n      peg$c563 = /^[\\n\\r]/,\n      peg$c564 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c565 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c566 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c567 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c568 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c569 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c570 = function(op, digits) { return \"-\" + digits; },\n      peg$c571 = function(op, digit) { return \"-\" + digit; },\n      peg$c572 = function(digits) { return \".\" + digits; },\n      peg$c573 = function(e, digits) { return e + digits; },\n      peg$c574 = function(digits) { return digits.join(\"\"); },\n      peg$c575 = /^[0-9]/,\n      peg$c576 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c577 = /^[0-9a-fA-F]/,\n      peg$c578 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c579 = /^[eE]/,\n      peg$c580 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c581 = /^[+\\-]/,\n      peg$c582 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c583 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c584 = \"null\",\n      peg$c585 = peg$literalExpectation(\"NULL\", true),\n      peg$c586 = \"not null\",\n      peg$c587 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c588 = \"true\",\n      peg$c589 = peg$literalExpectation(\"TRUE\", true),\n      peg$c590 = \"to\",\n      peg$c591 = peg$literalExpectation(\"TO\", true),\n      peg$c592 = \"false\",\n      peg$c593 = peg$literalExpectation(\"FALSE\", true),\n      peg$c594 = \"drop\",\n      peg$c595 = peg$literalExpectation(\"DROP\", true),\n      peg$c596 = function() { return 'DROP'; },\n      peg$c597 = \"use\",\n      peg$c598 = peg$literalExpectation(\"USE\", true),\n      peg$c599 = \"select\",\n      peg$c600 = peg$literalExpectation(\"SELECT\", true),\n      peg$c601 = \"if not exists\",\n      peg$c602 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c603 = \"RECURSIVE\",\n      peg$c604 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c605 = \"ignore\",\n      peg$c606 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c607 = \"explain\",\n      peg$c608 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c609 = \"partition\",\n      peg$c610 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c611 = function() { return 'PARTITION' },\n      peg$c612 = \"into\",\n      peg$c613 = peg$literalExpectation(\"INTO\", true),\n      peg$c614 = \"from\",\n      peg$c615 = peg$literalExpectation(\"FROM\", true),\n      peg$c616 = \"unlock\",\n      peg$c617 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c618 = \"table\",\n      peg$c619 = peg$literalExpectation(\"TABLE\", true),\n      peg$c620 = function() { return 'TABLE'; },\n      peg$c621 = \"tables\",\n      peg$c622 = peg$literalExpectation(\"TABLES\", true),\n      peg$c623 = function() { return 'TABLES'; },\n      peg$c624 = function() { return 'COLLATE'; },\n      peg$c625 = \"left\",\n      peg$c626 = peg$literalExpectation(\"LEFT\", true),\n      peg$c627 = \"right\",\n      peg$c628 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c629 = \"full\",\n      peg$c630 = peg$literalExpectation(\"FULL\", true),\n      peg$c631 = \"inner\",\n      peg$c632 = peg$literalExpectation(\"INNER\", true),\n      peg$c633 = \"cross\",\n      peg$c634 = peg$literalExpectation(\"CROSS\", true),\n      peg$c635 = \"join\",\n      peg$c636 = peg$literalExpectation(\"JOIN\", true),\n      peg$c637 = \"outer\",\n      peg$c638 = peg$literalExpectation(\"OUTER\", true),\n      peg$c639 = \"over\",\n      peg$c640 = peg$literalExpectation(\"OVER\", true),\n      peg$c641 = \"union\",\n      peg$c642 = peg$literalExpectation(\"UNION\", true),\n      peg$c643 = \"value\",\n      peg$c644 = peg$literalExpectation(\"VALUE\", true),\n      peg$c645 = function() { return 'VALUE' },\n      peg$c646 = \"values\",\n      peg$c647 = peg$literalExpectation(\"VALUES\", true),\n      peg$c648 = \"using\",\n      peg$c649 = peg$literalExpectation(\"USING\", true),\n      peg$c650 = \"where\",\n      peg$c651 = peg$literalExpectation(\"WHERE\", true),\n      peg$c652 = \"group\",\n      peg$c653 = peg$literalExpectation(\"GROUP\", true),\n      peg$c654 = \"by\",\n      peg$c655 = peg$literalExpectation(\"BY\", true),\n      peg$c656 = \"order\",\n      peg$c657 = peg$literalExpectation(\"ORDER\", true),\n      peg$c658 = \"having\",\n      peg$c659 = peg$literalExpectation(\"HAVING\", true),\n      peg$c660 = \"window\",\n      peg$c661 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c662 = \"ordinal\",\n      peg$c663 = peg$literalExpectation(\"ORDINAL\", true),\n      peg$c664 = function() { return 'ORDINAL' },\n      peg$c665 = \"limit\",\n      peg$c666 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c667 = \"offset\",\n      peg$c668 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c669 = function() { return 'OFFSET'; },\n      peg$c670 = \"asc\",\n      peg$c671 = peg$literalExpectation(\"ASC\", true),\n      peg$c672 = function() { return 'ASC'; },\n      peg$c673 = \"desc\",\n      peg$c674 = peg$literalExpectation(\"DESC\", true),\n      peg$c675 = function() { return 'DESC'; },\n      peg$c676 = \"all\",\n      peg$c677 = peg$literalExpectation(\"ALL\", true),\n      peg$c678 = function() { return 'ALL'; },\n      peg$c679 = \"distinct\",\n      peg$c680 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c681 = function() { return 'DISTINCT';},\n      peg$c682 = \"between\",\n      peg$c683 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c684 = function() { return 'BETWEEN'; },\n      peg$c685 = \"in\",\n      peg$c686 = peg$literalExpectation(\"IN\", true),\n      peg$c687 = function() { return 'IN'; },\n      peg$c688 = \"is\",\n      peg$c689 = peg$literalExpectation(\"IS\", true),\n      peg$c690 = function() { return 'IS'; },\n      peg$c691 = \"like\",\n      peg$c692 = peg$literalExpectation(\"LIKE\", true),\n      peg$c693 = function() { return 'LIKE'; },\n      peg$c694 = \"exists\",\n      peg$c695 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c696 = function() { return 'EXISTS'; },\n      peg$c697 = function() { return 'NOT'; },\n      peg$c698 = \"and\",\n      peg$c699 = peg$literalExpectation(\"AND\", true),\n      peg$c700 = function() { return 'AND'; },\n      peg$c701 = \"or\",\n      peg$c702 = peg$literalExpectation(\"OR\", true),\n      peg$c703 = function() { return 'OR'; },\n      peg$c704 = \"count\",\n      peg$c705 = peg$literalExpectation(\"COUNT\", true),\n      peg$c706 = function() { return 'COUNT'; },\n      peg$c707 = \"max\",\n      peg$c708 = peg$literalExpectation(\"MAX\", true),\n      peg$c709 = function() { return 'MAX'; },\n      peg$c710 = \"min\",\n      peg$c711 = peg$literalExpectation(\"MIN\", true),\n      peg$c712 = function() { return 'MIN'; },\n      peg$c713 = \"sum\",\n      peg$c714 = peg$literalExpectation(\"SUM\", true),\n      peg$c715 = function() { return 'SUM'; },\n      peg$c716 = \"avg\",\n      peg$c717 = peg$literalExpectation(\"AVG\", true),\n      peg$c718 = function() { return 'AVG'; },\n      peg$c719 = \"extract\",\n      peg$c720 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c721 = function() { return 'EXTRACT'; },\n      peg$c722 = \"call\",\n      peg$c723 = peg$literalExpectation(\"CALL\", true),\n      peg$c724 = function() { return 'CALL'; },\n      peg$c725 = \"case\",\n      peg$c726 = peg$literalExpectation(\"CASE\", true),\n      peg$c727 = \"when\",\n      peg$c728 = peg$literalExpectation(\"WHEN\", true),\n      peg$c729 = \"then\",\n      peg$c730 = peg$literalExpectation(\"THEN\", true),\n      peg$c731 = \"else\",\n      peg$c732 = peg$literalExpectation(\"ELSE\", true),\n      peg$c733 = \"end\",\n      peg$c734 = peg$literalExpectation(\"END\", true),\n      peg$c735 = \"cast\",\n      peg$c736 = peg$literalExpectation(\"CAST\", true),\n      peg$c737 = \"array\",\n      peg$c738 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c739 = function() { return 'ARRAY'; },\n      peg$c740 = \"bytes\",\n      peg$c741 = peg$literalExpectation(\"BYTES\", true),\n      peg$c742 = function() { return 'BYTES'; },\n      peg$c743 = \"bool\",\n      peg$c744 = peg$literalExpectation(\"BOOL\", true),\n      peg$c745 = function() { return 'BOOL'; },\n      peg$c746 = \"char\",\n      peg$c747 = peg$literalExpectation(\"CHAR\", true),\n      peg$c748 = function() { return 'CHAR'; },\n      peg$c749 = \"geography\",\n      peg$c750 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c751 = function() { return 'GEOGRAPHY'; },\n      peg$c752 = \"varchar\",\n      peg$c753 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c754 = function() { return 'VARCHAR';},\n      peg$c755 = \"numeric\",\n      peg$c756 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c757 = function() { return 'NUMERIC'; },\n      peg$c758 = \"decimal\",\n      peg$c759 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c760 = function() { return 'DECIMAL'; },\n      peg$c761 = \"signed\",\n      peg$c762 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c763 = function() { return 'SIGNED'; },\n      peg$c764 = \"unsigned\",\n      peg$c765 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c766 = function() { return 'UNSIGNED'; },\n      peg$c767 = \"int64\",\n      peg$c768 = peg$literalExpectation(\"INT64\", true),\n      peg$c769 = function() { return 'INT64'; },\n      peg$c770 = \"zerofill\",\n      peg$c771 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c772 = function() { return 'ZEROFILL'; },\n      peg$c773 = \"integer\",\n      peg$c774 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c775 = function() { return 'INTEGER'; },\n      peg$c776 = \"json\",\n      peg$c777 = peg$literalExpectation(\"JSON\", true),\n      peg$c778 = function() { return 'JSON'; },\n      peg$c779 = \"smallint\",\n      peg$c780 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c781 = function() { return 'SMALLINT'; },\n      peg$c782 = \"string\",\n      peg$c783 = peg$literalExpectation(\"STRING\", true),\n      peg$c784 = function() { return 'STRING'; },\n      peg$c785 = \"struct\",\n      peg$c786 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c787 = function() { return 'STRUCT'; },\n      peg$c788 = \"tinyint\",\n      peg$c789 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c790 = function() { return 'TINYINT'; },\n      peg$c791 = \"tinytext\",\n      peg$c792 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c793 = function() { return 'TINYTEXT'; },\n      peg$c794 = \"text\",\n      peg$c795 = peg$literalExpectation(\"TEXT\", true),\n      peg$c796 = function() { return 'TEXT'; },\n      peg$c797 = \"mediumtext\",\n      peg$c798 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c799 = function() { return 'MEDIUMTEXT'; },\n      peg$c800 = \"longtext\",\n      peg$c801 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c802 = function() { return 'LONGTEXT'; },\n      peg$c803 = \"bigint\",\n      peg$c804 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c805 = function() { return 'BIGINT'; },\n      peg$c806 = \"float64\",\n      peg$c807 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c808 = function() { return 'FLOAT64'; },\n      peg$c809 = \"double\",\n      peg$c810 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c811 = function() { return 'DOUBLE'; },\n      peg$c812 = function() { return 'DATE'; },\n      peg$c813 = \"datetime\",\n      peg$c814 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c815 = function() { return 'DATETIME'; },\n      peg$c816 = function() { return 'ROWS'; },\n      peg$c817 = \"time\",\n      peg$c818 = peg$literalExpectation(\"TIME\", true),\n      peg$c819 = function() { return 'TIME'; },\n      peg$c820 = \"timestamp\",\n      peg$c821 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c822 = function() { return 'TIMESTAMP'; },\n      peg$c823 = \"truncate\",\n      peg$c824 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c825 = function() { return 'TRUNCATE'; },\n      peg$c826 = \"user\",\n      peg$c827 = peg$literalExpectation(\"USER\", true),\n      peg$c828 = function() { return 'USER'; },\n      peg$c829 = \"current_date\",\n      peg$c830 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c831 = function() { return 'CURRENT_DATE'; },\n      peg$c832 = \"adddate\",\n      peg$c833 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c834 = function() { return 'ADDDATE'; },\n      peg$c835 = \"interval\",\n      peg$c836 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c837 = function() { return 'INTERVAL'; },\n      peg$c838 = function() { return 'YEAR'; },\n      peg$c839 = function() { return 'MONTH'; },\n      peg$c840 = function() { return 'DAY'; },\n      peg$c841 = function() { return 'HOUR'; },\n      peg$c842 = function() { return 'MINUTE'; },\n      peg$c843 = function() { return 'SECOND'; },\n      peg$c844 = \"current_time\",\n      peg$c845 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c846 = function() { return 'CURRENT_TIME'; },\n      peg$c847 = \"current_timestamp\",\n      peg$c848 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c849 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c850 = \"session_user\",\n      peg$c851 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c852 = function() { return 'SESSION_USER'; },\n      peg$c853 = \"global\",\n      peg$c854 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c855 = function() { return 'GLOBAL'; },\n      peg$c856 = \"session\",\n      peg$c857 = peg$literalExpectation(\"SESSION\", true),\n      peg$c858 = function() { return 'SESSION'; },\n      peg$c859 = function() { return 'LOCAL'; },\n      peg$c860 = \"pivot\",\n      peg$c861 = peg$literalExpectation(\"PIVOT\", true),\n      peg$c862 = function() { return 'PIVOT'; },\n      peg$c863 = \"persist\",\n      peg$c864 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c865 = function() { return 'PERSIST'; },\n      peg$c866 = \"persist_only\",\n      peg$c867 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c868 = function() { return 'PERSIST_ONLY'; },\n      peg$c869 = \"add\",\n      peg$c870 = peg$literalExpectation(\"ADD\", true),\n      peg$c871 = function() { return 'ADD'; },\n      peg$c872 = \"column\",\n      peg$c873 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c874 = function() { return 'COLUMN'; },\n      peg$c875 = \"index\",\n      peg$c876 = peg$literalExpectation(\"INDEX\", true),\n      peg$c877 = function() { return 'INDEX'; },\n      peg$c878 = function() { return 'KEY'; },\n      peg$c879 = \"fulltext\",\n      peg$c880 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c881 = function() { return 'FULLTEXT'; },\n      peg$c882 = function() { return 'UNIQUE'; },\n      peg$c883 = \"comment\",\n      peg$c884 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c885 = function() { return 'COMMENT'; },\n      peg$c886 = \"constraint\",\n      peg$c887 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c888 = function() { return 'CONSTRAINT'; },\n      peg$c889 = \"references\",\n      peg$c890 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c891 = function() { return 'REFERENCES'; },\n      peg$c892 = \",\",\n      peg$c893 = peg$literalExpectation(\",\", false),\n      peg$c894 = \"[\",\n      peg$c895 = peg$literalExpectation(\"[\", false),\n      peg$c896 = \"]\",\n      peg$c897 = peg$literalExpectation(\"]\", false),\n      peg$c898 = \";\",\n      peg$c899 = peg$literalExpectation(\";\", false),\n      peg$c900 = \"||\",\n      peg$c901 = peg$literalExpectation(\"||\", false),\n      peg$c902 = \"&&\",\n      peg$c903 = peg$literalExpectation(\"&&\", false),\n      peg$c904 = \"/*\",\n      peg$c905 = peg$literalExpectation(\"/*\", false),\n      peg$c906 = \"*/\",\n      peg$c907 = peg$literalExpectation(\"*/\", false),\n      peg$c908 = \"--\",\n      peg$c909 = peg$literalExpectation(\"--\", false),\n      peg$c910 = \"#\",\n      peg$c911 = peg$literalExpectation(\"#\", false),\n      peg$c912 = peg$anyExpectation(),\n      peg$c913 = /^[ \\t\\n\\r]/,\n      peg$c914 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c915 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c916 = function(n) {\n            return n\n          },\n      peg$c917 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c918 = function(t) { return { dataType: t }; },\n      peg$c919 = function(t, l) { return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true }; },\n      peg$c920 = \"MAX\",\n      peg$c921 = peg$literalExpectation(\"MAX\", false),\n      peg$c922 = peg$literalExpectation(\"max\", false),\n      peg$c923 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsecrud_stmt();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecrud_stmt() {\n    var s0;\n\n    s0 = peg$parseunion_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseupdate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereplace_insert_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinsert_no_columns_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseinsert_into_set();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsedelete_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecmd_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseproc_stmts();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdate_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UPDATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseset_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefrom_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewhere_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseorder_by_clause();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parselimit_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c2(s3, s7, s9, s11, s13, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedelete_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefrom_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhere_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseorder_by_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parselimit_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c3(s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseLPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecolumn_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseinsert_value_clause();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseon_duplicate_update_stmt();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c4(s1, s5, s7, s11, s15, s17);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_no_columns_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_IGNORE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INTO();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseinsert_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseinsert_value_clause();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseon_duplicate_update_stmt();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c5(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_into_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_SET();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseset_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseon_duplicate_update_stmt();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c6(s1, s5, s7, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecmd_stmt() {\n    var s0;\n\n    s0 = peg$parseanalyze_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseattach_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedrop_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsetruncate_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parserename_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecall_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseuse_stmt();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsealter_table_stmt();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseset_stmt();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parselock_stmt();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parseunlock_stmt();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parseshow_stmt();\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$parsedesc_stmt();\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmts() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseproc_stmt();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parseproc_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c7();\n    if (s1) {\n      s1 = void 0;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseassign_stmt();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsereturn_stmt();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassign_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewithout_prefix_var_decl();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGN();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c9(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturn_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c10(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_expr() {\n    var s0;\n\n    s0 = peg$parseselect_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseproc_join();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_additive_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseproc_array();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_additive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_multiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_multiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_multiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_multiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsejoin_op();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevar_decl();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseon_clause();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar_decl();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_func_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseparam();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseLPAREN();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseproc_additive_expr();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseRPAREN();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c13(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_primary_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c14(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_array() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_primary_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c17(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseset_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseset_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseset_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c18;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c20(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c18;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_VALUES();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseLPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecolumn_ref();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseRPAREN();\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c21(s1, s3, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c22();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_REPLACE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c23();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseCOMMA();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseident_name();\n                    if (s11 !== peg$FAILED) {\n                      s8 = [s8, s9, s10, s11];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseCOMMA();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseident_name();\n                      if (s11 !== peg$FAILED) {\n                        s8 = [s8, s9, s10, s11];\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c24(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_PARTITION();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_item();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c25(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_value_clause() {\n    var s0;\n\n    s0 = peg$parsevalue_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_duplicate_update_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c26) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c27); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_KEY();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_UPDATE();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseset_list();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseanalyze_stmt() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ANALYZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_name();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c29(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseattach_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ATTACH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c30(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c31(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DROP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_INDEX();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_ON();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_name();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsedrop_index_opt();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c32(s1, s3, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_stmt() {\n    var s0;\n\n    s0 = peg$parsecreate_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_db_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parsetruncate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUNCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c33(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserename_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_to_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecall_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CALL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_func_call();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c35(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuse_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SET();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_GLOBAL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SESSION();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_LOCAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_PERSIST();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_PERSIST_ONLY();\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseassign_stmt();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c37(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLES();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parselock_table_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c38(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunlock_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNLOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLES();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c39();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SHOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c40) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c43); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c44) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c45); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c46(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_SHOW();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c47) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c48); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c49) {\n                s5 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c50); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsein_op_right();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsefrom_clause();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parselimit_clause();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c51(s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_SHOW();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c52) {\n              s4 = input.substr(peg$currPos, 9);\n              peg$currPos += 9;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c53); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n                  s6 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c55); }\n                }\n                if (s6 !== peg$FAILED) {\n                  s4 = [s4, s5, s6];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c56) {\n                s3 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c57); }\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parselike_op_right();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parsewhere_clause();\n                }\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c58(s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseshow_grant_stmt();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedesc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DESC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DESCRIBE();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c59(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR_PRE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewithout_prefix_var_decl();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c60(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewithout_prefix_var_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemem_chain();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c61(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c62(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VALUES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c63(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_index_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseALTER_ALGORITHM();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseALTER_LOCK();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseALTER_ALGORITHM();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseALTER_LOCK();\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseALTER_ALGORITHM();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseALTER_LOCK();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c64(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_TABLE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_IF_NOT_EXISTS();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_ref_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecreate_table_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = [];\n                            s14 = peg$parsecreate_constraint_definition();\n                            while (s14 !== peg$FAILED) {\n                              s13.push(s14);\n                              s14 = peg$parsecreate_constraint_definition();\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsetable_options();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseKW_IGNORE();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = peg$parseKW_REPLACE();\n                                    }\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseKW_AS();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseunion_stmt();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c65(s1, s3, s7, s9, s11, s13, s15, s17, s19, s21);\n                                              s0 = s1;\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CREATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_TEMPORARY();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_TABLE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_IF_NOT_EXISTS();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_ref_list();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_like_table();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c66(s1, s3, s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SCHEMA();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_IF_NOT_EXISTS();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_db_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c67(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsealter_action_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c68(s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_table_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parselock_table();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parselock_table();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parselock_table();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c69(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SHOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c70) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c71); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseshow_grant_for();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c72(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_chain() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s3 = peg$c73;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c74); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseident_name();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c73;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseident_name();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c75(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsevalue_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevalue_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ALGORITHM() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c76) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c77); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c78) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c79); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c80) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c81); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c82) {\n                  s5 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c83); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c84) {\n                    s5 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c85); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c86(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_LOCK() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c87) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c88); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c78) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c79); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c89) {\n                s5 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c90); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c91) {\n                  s5 = input.substr(peg$currPos, 6);\n                  peg$currPos += 6;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c92); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c93) {\n                    s5 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c94); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c95(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecreate_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecreate_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c16(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_column_definition();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_index_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_fulltext_spatial_index_definition();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_not_null();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseliteral_null();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsedefault_expr();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c96) {\n                      s9 = input.substr(peg$currPos, 14);\n                      peg$currPos += 14;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c97); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c98) {\n                          s12 = input.substr(peg$currPos, 6);\n                          peg$currPos += 6;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c99); }\n                        }\n                        if (s12 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c100) {\n                            s12 = input.substr(peg$currPos, 7);\n                            peg$currPos += 7;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c101); }\n                          }\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c102) {\n                              s14 = input.substr(peg$currPos, 3);\n                              peg$currPos += 3;\n                            } else {\n                              s14 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c103); }\n                            }\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsekeyword_comment();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsecollate_expr();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsecolumn_format();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsestorage();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parsereference_definition();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c104(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21);\n                                              s0 = s1;\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c105(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecreate_like_table_simple();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecreate_like_table();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c106(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_option_character_set();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_option_character_set();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_option_character_set();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c64(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealter_action();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsealter_action();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsealter_action();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_table() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parselock_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c107(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_for() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c108) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c109); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseKW_VAR__PRE_AT();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseident();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseshow_grant_for_using();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c110(s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_primary();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_unique();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_constraint_foreign();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_constraint_check();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INDEX();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_KEY();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c111(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_fulltext_spatial_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FULLTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_SPATIAL();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INDEX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_KEY();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c112(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefault_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c113(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COMMENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_string();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c114(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecollate_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COLLATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c115(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_format() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c116) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c117); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c118) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c119); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c120) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c121); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c78) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c79); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c122(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c123) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c124); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c125) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c126); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c127) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c128); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c129(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_REFERENCES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecte_column_definition();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c130) {\n                  s7 = input.substr(peg$currPos, 10);\n                  peg$currPos += 10;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c131); }\n                }\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13).toLowerCase() === peg$c132) {\n                    s7 = input.substr(peg$currPos, 13);\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c133); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c134) {\n                      s7 = input.substr(peg$currPos, 12);\n                      peg$currPos += 12;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c135); }\n                    }\n                  }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseon_reference();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseon_reference();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c136(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c96) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c97); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c137) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c138); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c139) {\n          s1 = input.substr(peg$currPos, 14);\n          peg$currPos += 14;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c140); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c141) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c142); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c143) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c144); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c145) {\n                s1 = input.substr(peg$currPos, 18);\n                peg$currPos += 18;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c146); }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c147(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_option_character_set();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_COMMENT();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c148) {\n            s1 = input.substr(peg$currPos, 10);\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c149); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseliteral_string();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c150(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c151) {\n            s1 = input.substr(peg$currPos, 11);\n            peg$currPos += 11;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c152); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_ASSIGIN_EQUAL();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c153;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c154); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c155) {\n                      s7 = input.substr(peg$currPos, 4);\n                      peg$currPos += 4;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c156); }\n                    }\n                    if (s7 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c157) {\n                        s7 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c158); }\n                      }\n                      if (s7 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c89) {\n                          s7 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n                        }\n                      }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s8 = peg$c153;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c154); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s6 = [s6, s7, s8];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c159(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c160) {\n              s1 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c161); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_ASSIGIN_EQUAL();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseident_name();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c162(s1, s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table_simple() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c163(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_option_character_set_kw();\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c164) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c165); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c166) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c167); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c168(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action() {\n    var s0;\n\n    s0 = peg$parseALTER_ADD_COLUMN();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseALTER_DROP_COLUMN();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseALTER_RENAME_TABLE();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c169) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c170); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c171) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c172); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c173(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c174) {\n        s1 = input.substr(peg$currPos, 12);\n        peg$currPos += 12;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c175); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c176) {\n            s3 = input.substr(peg$currPos, 5);\n            peg$currPos += 5;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c177); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c178(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_for_using() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseshow_grant_for_using_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c179(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_for_using_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseident();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c69(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_primary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c100) {\n          s4 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c101); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c102) {\n              s6 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c103); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c180(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_unique() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_KEY();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_type();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecte_column_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseindex_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c181(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_foreign() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c182) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c183); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsereference_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c184(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_check() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c185) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c186); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c187) {\n              s6 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c188); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c108) {\n                  s8 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c109); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c189) {\n                      s10 = input.substr(peg$currPos, 11);\n                      peg$currPos += 11;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c190); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9, s10, s11];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseLPAREN();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseexpr();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseRPAREN();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c191(s1, s3, s5, s8);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c192) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c193); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c194) {\n            s3 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c195); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c196(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecolumn();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecolumn();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c16(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseindex_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseindex_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c197(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_option() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_KEY_BLOCK_SIZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c198(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseindex_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c199) {\n          s1 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c200); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c201) {\n              s3 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c202); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseident_name();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c203(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c204) {\n            s1 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c205); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c206) {\n              s1 = input.substr(peg$currPos, 9);\n              peg$currPos += 9;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c207); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c208(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsekeyword_comment();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_reference() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c209) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c210); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c211) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c212); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c213) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c214); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsereference_option();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c215(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set_kw() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c52) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c53); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c55); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c216();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecreate_column_definition();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c217(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_ref();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c218(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_RENAME_TABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_AS();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c219(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseconstraint_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CONSTRAINT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c220(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c221) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c222); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c223) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c224); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c225) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c226); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c227) {\n            s1 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c228); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c229) {\n              s1 = input.substr(peg$currPos, 11);\n              peg$currPos += 11;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c230); }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c231(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseKW_UPDATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c213) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c214); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CREATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c232) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c233); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DELETE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c211) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INSERT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c234) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c235); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c236) {\n      s0 = peg$c236;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c237); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGIN_EQUAL() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c18;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c238) {\n      s0 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c239); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REPLACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c240) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c241); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ANALYZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c242) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c243); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ATTACH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c244) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c245); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATABASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c246) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RENAME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c248) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c249); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c250) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c251); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESCRIBE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c252) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c253); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s0 = peg$c254;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c255); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT_AT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c256) {\n      s0 = peg$c256;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c257); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s0 = peg$c258;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c259); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE() {\n    var s0;\n\n    s0 = peg$parseKW_VAR__PRE_AT_AT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_VAR__PRE_AT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_VAR_PRE_DOLLAR();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMPORARY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c260) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c261); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SCHEMA() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c262) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c263); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c264) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c265); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SPATIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c266) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c267); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY_BLOCK_SIZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c139) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c140); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c268;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c269); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c270;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c271); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c272(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c273(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c274(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c275) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c276); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c277) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c278); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c279(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c268;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c269); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c270;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c271); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c280(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c281(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c268;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c269); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c270;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c271); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c282(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c16(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c283(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsestruct_value();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_ALL();\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$parseKW_DISTINCT();\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsefor_sys_time_as_of();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsewhere_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsegroup_by_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parsehaving_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parseorder_by_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parselimit_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parse__();\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parsewindow_clause();\n                                                      if (s26 === peg$FAILED) {\n                                                        s26 = null;\n                                                      }\n                                                      if (s26 !== peg$FAILED) {\n                                                        peg$savedPos = s0;\n                                                        s1 = peg$c284(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24, s26);\n                                                        s0 = s1;\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c108) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c109); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c285) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c286); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c287) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c288); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c289) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c290); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c291(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c292(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c293(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c277) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c278); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c240) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c241); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c294(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c295(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c296(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ORDINAL();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c297(s1, s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c298(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsecolumn_offset_expr();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseident();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseDOT();\n                if (s7 !== peg$FAILED) {\n                  s5 = [s5, s6, s7];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseSTAR();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c299(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumn_offset_expr();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsealias_clause();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c300(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseexpr_alias();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c301(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c301(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_unnest_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c302) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c303); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsealias_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewith_offset();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c304(s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepivot_operator();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c305(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepivot_operator() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PIVOT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseaggr_func_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c108) {\n                  s7 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c109); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecolumn_ref();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsein_op_right();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsealias_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c306(s5, s9, s11, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c307(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c308(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c309(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c310(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c310(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c311(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c312(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c313(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehint() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    if (peg$c314.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c315); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c316.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c317); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident_name();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (peg$c318.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c319); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseident_name();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (peg$c320.test(input.charAt(peg$currPos))) {\n                        s10 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c321); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetablesample() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c322) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c323); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c324) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c325); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c326) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c327); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s5 = peg$c268;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c269); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsenumber();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c328) {\n                      s9 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c329); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c330) {\n                        s9 = input.substr(peg$currPos, 4);\n                        peg$currPos += 4;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c331); }\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                          s11 = peg$c270;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c271); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsehint();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetablesample();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsealias_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c332(s1, s2, s4, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsetablesample();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsealias_clause();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c333(s3, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsefrom_unnest_item();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c334();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c335();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c336();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CROSS();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c337(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_INNER();\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_JOIN();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c338(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c339(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c340(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c341(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c341(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c342(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c341(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c343(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c344(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c345(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c346(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c347(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c348) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c349); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c350) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c351); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c352) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c353); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c354) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c355); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c356) {\n                            s12 = peg$c356;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c357); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c358();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ROWS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_frame_following();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsewindow_frame_preceding();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c359(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_ROWS();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_BETWEEN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsewindow_frame_preceding();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AND();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsewindow_frame_following();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c360(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_following() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c361) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c362); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c363(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_preceding() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c352) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c353); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c364(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_current_row() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c354) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c355); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c365) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c366); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c367();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_value() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c350) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c351); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c368(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c369(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c63(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c166) {\n          s4 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c167); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseliteral_string();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_DESC();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ASC();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c370(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c371(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c372(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseor_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseunion_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c296(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c373(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c374(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c375(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c376(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c377(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c378(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c379(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c380;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c381); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c18;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c382(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c383(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c384(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c385(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c386(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c387) {\n      s0 = peg$c387;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c388); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c389;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c390); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c391) {\n          s0 = peg$c391;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c392); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c393) {\n            s0 = peg$c393;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c394); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c395;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c396); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c18;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c397) {\n                  s0 = peg$c397;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c398); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c399(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c400(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c401(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c385(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c385(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c385(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c402(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c403(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c404(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c405;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c406); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c407;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c408); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c409(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c410;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c411); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c412;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c413); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c414;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c415); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsearray_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecast_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseaggr_func();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsefunc_call();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecase_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseinterval_expr();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsecolumn_ref();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseparam();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      s1 = peg$parseLPAREN();\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parse__();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parseor_and_where_expr();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parse__();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parseRPAREN();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c416(s3);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c417(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecase_when_then();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsecase_when_then();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c418(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsecase_when_then();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsecase_when_then();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c419(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c420(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c421(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseDOT();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parse__();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parsecolumn();\n              if (s8 !== peg$FAILED) {\n                s5 = [s5, s6, s7, s8];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseDOT();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsecolumn();\n                  if (s8 !== peg$FAILED) {\n                    s5 = [s5, s6, s7, s8];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c422(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_without_kw();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c423(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumn();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c424(s1);\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c425(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c426(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c426(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c427(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c426(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c426(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c428;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c429); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c430.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c431); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c430.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c431); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c428;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c429); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c432(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c153;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c154); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c433.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c434); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c433.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c434); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c153;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c154); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c432(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c435;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c436); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c437.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c438); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c437.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c438); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c435;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c436); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c439(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c440(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c425(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c441(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c442(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c442(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c443.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c444); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c445.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c446); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c447.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c448); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c449;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c450); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c451(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseaggr_func();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseaggr_func();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parsealias_clause();\n                    if (s11 === peg$FAILED) {\n                      s11 = null;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s6 = [s6, s7, s8, s9, s10, s11];\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseaggr_func();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parsealias_clause();\n                      if (s11 === peg$FAILED) {\n                        s11 = null;\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9, s10, s11];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c452(s1, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c453(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c213) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c214); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c454(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c213) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c214); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c455(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c456(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c457(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c458(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c459(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c460(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseorder_by_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c461(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c410;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c411); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c462();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseextract_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseor_and_where_expr();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c463(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c464(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CURRENT_TIMESTAMP();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseon_update_current_timestamp();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c465(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseDOT();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseident();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c466(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_SESSION_USER();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c467) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c468); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c469) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c470); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c471) {\n          s0 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c472); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c473) {\n            s0 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c474); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c475) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c476); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c477) {\n                s0 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c478); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c479) {\n                  s0 = input.substr(peg$currPos, 5);\n                  peg$currPos += 5;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c480); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c481) {\n                    s0 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c482); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c483) {\n                      s0 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c484); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c485) {\n                        s0 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c486); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c487) {\n                          s0 = input.substr(peg$currPos, 12);\n                          peg$currPos += 12;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c488); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c489) {\n                            s0 = input.substr(peg$currPos, 10);\n                            peg$currPos += 10;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c490); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 12).toLowerCase() === peg$c491) {\n                              s0 = input.substr(peg$currPos, 12);\n                              peg$currPos += 12;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c492); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c493) {\n                                s0 = input.substr(peg$currPos, 6);\n                                peg$currPos += 6;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c494); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c495) {\n                                  s0 = input.substr(peg$currPos, 5);\n                                  peg$currPos += 5;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c496); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c497) {\n                                    s0 = input.substr(peg$currPos, 7);\n                                    peg$currPos += 7;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c498); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c499) {\n                                      s0 = input.substr(peg$currPos, 6);\n                                      peg$currPos += 6;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c500); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c501) {\n                                        s0 = input.substr(peg$currPos, 8);\n                                        peg$currPos += 8;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c502); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c503) {\n                                          s0 = input.substr(peg$currPos, 13);\n                                          peg$currPos += 13;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c504); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 15).toLowerCase() === peg$c505) {\n                                            s0 = input.substr(peg$currPos, 15);\n                                            peg$currPos += 15;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c506); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c507) {\n                                              s0 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s0 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c508); }\n                                            }\n                                            if (s0 === peg$FAILED) {\n                                              s0 = peg$currPos;\n                                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c509) {\n                                                s1 = input.substr(peg$currPos, 4);\n                                                peg$currPos += 4;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c510); }\n                                              }\n                                              if (s1 !== peg$FAILED) {\n                                                peg$savedPos = s0;\n                                                s1 = peg$c511();\n                                              }\n                                              s0 = s1;\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c512(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c513(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c514(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c515(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c516(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c517();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c518();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c519();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c520();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c521) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c522); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c153;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c154); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c153;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c154); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c523(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c521) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c522); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c428;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c429); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c428;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c429); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c524(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c153;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c154); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c153;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c154); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c525(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c428;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c429); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c428;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c429); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c525(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c526.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c527); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c528.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c529); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c530) {\n      s1 = peg$c530;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c531); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c532();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c533) {\n        s1 = peg$c533;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c534); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c535();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c536) {\n          s1 = peg$c536;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c537); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c538();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c539) {\n            s1 = peg$c539;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c540); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c541();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c542) {\n              s1 = peg$c542;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c543); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c544();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c545) {\n                s1 = peg$c545;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c546); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c547();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c548) {\n                  s1 = peg$c548;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c549); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c550();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c551) {\n                    s1 = peg$c551;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c552); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c553();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c554) {\n                      s1 = peg$c554;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c555); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c556();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c557) {\n                        s1 = peg$c557;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c558); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c559(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c560;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c561); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c562();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c563.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c564); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c565(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c566(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c567(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c568(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c569(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c407;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c408); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c405;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c406); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c570(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c407;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c408); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c405;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c406); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c571(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c73;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c74); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c572(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c573(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c574(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c575.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c576); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c577.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c578); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c579.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c580); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c581.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c582); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c583(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c584) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c585); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c78) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c79); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c586) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c587); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c588) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c589); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c590) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c591); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c592) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c593); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c594) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c595); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c596();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c597) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c598); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c599) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c600); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c601) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c602); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c603) {\n      s1 = peg$c603;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c604); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c605) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c606); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c607) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c608); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c609) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c610); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c611();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c612) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c613); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c614) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c615); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c55); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c616) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c617); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c87) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c88); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c287) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c288); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c618) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c619); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c620();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c621) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c622); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c623();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c166) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c167); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c624();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c209) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c210); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c625) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c626); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c627) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c628); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c629) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c630); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c631) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c632); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c633) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c635) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c636); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c637) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c638); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c639) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c640); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c641) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c642); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERSECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c275) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c276); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXCEPT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c277) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c278); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c643) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c644); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c645();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c646) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c648) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c650) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c651); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c199) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c200); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c652) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c653); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c654) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c655); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c656) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c657); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c658) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c659); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c660) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c662) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c663); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c664();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c665) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c666); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c667) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c668); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c669();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c670) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c671); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c672();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c673) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c674); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c675();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c676) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c677); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c678();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c679) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c680); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c681();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c682) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c683); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c684();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c685) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c686); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c687();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c688) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c689); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c690();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c691) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c692); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c693();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c694) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c695); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c696();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c187) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c697();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c698) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c699); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c700();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c701) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c702); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c703();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c704) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c705); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c706();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c707) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c708); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c709();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c710) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c711); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c712();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c713) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c714); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c715();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c716) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c717); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c718();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c719) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c720); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c721();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c722) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c723); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c724();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c725) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c726); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c727) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c728); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c729) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c730); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c731) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c732); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c733) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c734); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c735) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c736); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c737) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c738); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c739();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c740) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c741); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c742();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c743) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c744); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c745();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c746) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c747); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c748();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c749) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c750); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c751();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c752) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c753); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c754();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c755) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c756); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c757();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c758) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c759); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c760();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c761) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c762); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c763();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c764) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c765); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c766();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c767) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c768); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c769();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c770) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c771); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c772();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c773) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c774); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c775();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c776) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c777); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c778();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c779) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c780); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c781();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c782) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c783); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c784();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c785) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c786); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c787();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c788) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c789); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c790();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c791) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c792); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c793();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c794) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c795); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c796();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c797) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c798); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c799();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c800) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c801); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c802();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c803) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c804); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c805();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c806) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c807); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c808();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c809) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c810); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c811();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c471) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c472); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c812();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c813) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c814); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c815();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROWS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c330) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c331); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c816();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c817) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c818); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c819();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c820) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c821); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c822();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c823) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c824); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c825();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c826) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c827); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c828();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c829) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c830); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c831();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c832) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c833); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c834();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c835) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c836); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c837();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c509) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c510); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c838();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c495) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c496); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c839();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c469) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c470); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c840();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c481) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c482); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c841();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c493) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c494); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c842();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c499) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c500); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c843();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c844) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c845); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c846();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c847) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c848); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c849();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c850) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c851); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c852();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c853) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c854); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c855();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c856) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c857); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c858();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c171) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c172); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c859();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PIVOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c860) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c861); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c862();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c863) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c864); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c865();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c866) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c867); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c868();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c869) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c870); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c871();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c872) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c873); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c874();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c875) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c876); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c877();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c102) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c103); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c878();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c879) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c880); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c881();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c98) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c99); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c882();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c883) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c884); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c885();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c886) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c887); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c888();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c889) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c890); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c891();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c73;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c74); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c892;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c893); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c410;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c411); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c268;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c269); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c270;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c271); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c395;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c396); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c389;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c390); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c894;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c895); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c896;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c897); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c898;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c899); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c900) {\n      s0 = peg$c900;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c901); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c902) {\n      s0 = peg$c902;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c903); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c904) {\n      s1 = peg$c904;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c905); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c906) {\n        s5 = peg$c906;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c907); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c906) {\n          s5 = peg$c906;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c907); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c906) {\n          s3 = peg$c906;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c907); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c908) {\n      s1 = peg$c908;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c909); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c910;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c911); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c912); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c913.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c914); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c563.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c564); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c563.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c564); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c912); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c915(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c916(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c917(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLPAREN();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            if (peg$c575.test(input.charAt(peg$currPos))) {\n              s8 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c576); }\n            }\n            if (s8 !== peg$FAILED) {\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                if (peg$c575.test(input.charAt(peg$currPos))) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c576); }\n                }\n              }\n            } else {\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseRPAREN();\n                if (s9 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7, s8, s9];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseLPAREN();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = [];\n              if (peg$c575.test(input.charAt(peg$currPos))) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c576); }\n              }\n              if (s8 !== peg$FAILED) {\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  if (peg$c575.test(input.charAt(peg$currPos))) {\n                    s8 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c576); }\n                  }\n                }\n              } else {\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseRPAREN();\n                  if (s9 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8, s9];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c918(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c918(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c575.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c576); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c575.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c576); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c919(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c918(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_BYTES();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseLPAREN();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          if (peg$c575.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c576); }\n          }\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              if (peg$c575.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c576); }\n              }\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c920) {\n              s5 = peg$c920;\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c921); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c707) {\n                s5 = peg$c707;\n                peg$currPos += 3;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c922); }\n              }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseRPAREN();\n              if (s7 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6, s7];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c918(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c923(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c923(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n      'PIVOT': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n      'UNNEST': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, prefix, suffix, value } = literal\n  let str = value\n  switch (type) {\n    case 'backticks_quote_string':\n      str = `\\`${escape(value)}\\``\n      break\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'full_hex_string':\n      str = `0x${escape(value)}`\n      break\n    case 'bit_string':\n      str = `b'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix) result.push(typeof suffix === 'object' && suffix.collate ? commonTypeValue(suffix.collate).join(' ') : toUpper(suffix))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction dataTypeToSQL(expr) {\n  const { dataType, length, parentheses, scale, suffix } = expr\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (suffix && suffix.length) str += ` ${suffix.join(' ')}`\n  return `${dataType}${str}`\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: eventKw, args } = event\n    const result = [toUpper(eventKw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, dataTypeToSQL, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, toUpper } from './util'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const escape = expr.right.escape || {}\n  const str = [exprToSQL(expr.left), operator, rstr, toUpper(escape.type), exprToSQL(escape.value)].filter(hasVal).join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias, tail } = expr\n  const { length, dataType, parentheses, scale, suffix: dataTypeSuffix } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (dataTypeSuffix && dataTypeSuffix.length) str += ` ${dataTypeSuffix.join(' ')}`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  return `${prefix}${symbolChar}${dataType}${arrayDimension}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = str.join('')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  if (value.length === 1 && seperator === 'offset') return connector('OFFSET', exprToSQL(value[0]))\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.map(columnRefToSQL).join(', ')})` : ''\n    return `${name.type === 'default' ? identifierToSql(name.value) : literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { binaryToSQL } from './binary'\nimport { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction pivotOperatorToSQL(operator) {\n  const { as, column, expr, in_expr, type } = operator\n  const result = [\n    exprToSQL(expr),\n    'FOR',\n    columnRefToSQL(column),\n    binaryToSQL(in_expr),\n  ]\n  const sql = [`${toUpper(type)}(${result.join(' ')})`]\n  if (as) sql.push('AS', identifierToSql(as))\n  return sql.join(' ')\n}\n\nfunction operatorToSQL(operator) {\n  if (!operator) return\n  const { type } = operator\n  switch (type) {\n    case 'pivot':\n      return pivotOperatorToSQL(operator)\n    default:\n      return ''\n  }\n}\n\nfunction tableHintToSQL(tableHintExpr) {\n  if (!tableHintExpr) return\n  const { keyword, expr, index, index_columns, parentheses, prefix } = tableHintExpr\n  const result = []\n  switch (keyword.toLowerCase()) {\n    case 'forceseek':\n      result.push(toUpper(keyword), `(${identifierToSql(index)}`, `(${index_columns.map(exprToSQL).filter(hasVal).join(', ')}))`)\n      break\n    case 'spatial_window_max_cells':\n      result.push(toUpper(keyword), '=', exprToSQL(expr))\n      break\n    case 'index':\n      result.push(toUpper(prefix), toUpper(keyword), parentheses ? `(${expr.map(identifierToSql).join(', ')})` : `= ${identifierToSql(expr)}`)\n      break\n    default:\n      result.push(exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, operator, prefix: prefixStr, schema, tablesample, table_hint } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') {\n    const { parentheses, values, prefix } = expr\n    const valueSQL = [parentheses && '(', '', parentheses && ')']\n    let valuesExpr = valuesToSQL(values)\n    if (prefix) valuesExpr = valuesExpr.split('(').slice(1).map(val => `${toUpper(prefix)}(${val}`).join('')\n    valueSQL[1] = `VALUES ${valuesExpr}`\n    tableName = valueSQL.filter(hasVal).join('')\n  }\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  tableName = [toUpper(prefixStr), tableName].filter(hasVal).join(' ')\n  let str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  if (tableInfo.parentheses) str = `(${str})`\n  const result = [str, operatorToSQL(operator)]\n  if (tablesample) {\n    const tableSampleSQL = ['TABLESAMPLE', exprToSQL(tablesample.expr), literalToSQL(tablesample.repeatable)].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  if (as) result.push('AS', identifierToSql(as))\n  if (table_hint) result.push(`${toUpper(table_hint.keyword)}`, `(${table_hint.expr.map(tableHintToSQL).filter(hasVal).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  if (!tables) return ''\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  operatorToSQL,\n  tableHintToSQL,\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL, varToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, identifierToSql, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\nfunction selectIntoToSQL(into) {\n  if (!into) return\n  const { position } = into\n  if (!position) return\n  const { keyword, expr } = into\n  const result = []\n  const intoType = toUpper(keyword)\n  switch (intoType) {\n    case 'VAR':\n      result.push(expr.map(varToSQL).join(', '))\n      break\n    default:\n      result.push(intoType, typeof expr === 'string' ? identifierToSql(expr) : exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal,\n    columns,\n    distinct,\n    from,\n    for_sys_time_as_of: forSystem = {},\n    locking_read: lockingRead,\n    groupby,\n    having,\n    into = {},\n    limit,\n    options,\n    orderby,\n    parentheses_symbol: parentheses,\n    top,\n    window: windowInfo,\n    with: withInfo,\n    where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  const { position } = into\n  let intoSQL = ''\n  if (position) intoSQL = commonOptionConnector('INTO', selectIntoToSQL, into)\n  if (position === 'column') clauses.push(intoSQL)\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  if (position === 'from') clauses.push(intoSQL)\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(lockingRead))\n  if (position === 'end') clauses.push(intoSQL)\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectIntoToSQL,\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tableToSQL, tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    case 'CREATE':\n      str = commonOptionConnector('', tableToSQL, showExpr.view)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector, dataTypeToSQL, hasVal } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL, fulltextSearchToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter           : alterExprToSQL,\n  aggr_func       : aggrToSQL,\n  window_func     : windowFuncToSQL,\n  'array'         : arrayStructExprToSQL,\n  assign          : assignToSQL,\n  binary_expr     : binaryToSQL,\n  case            : caseToSQL,\n  cast            : castToSQL,\n  column_ref      : columnRefToSQL,\n  datatype        : dataTypeToSQL,\n  extract         : extractFunToSQL,\n  fulltext_search : fulltextSearchToSQL,\n  function        : funcToSQL,\n  insert          : unionToSQL,\n  interval        : intervalToSQL,\n  show            : showToSQL,\n  struct          : arrayStructExprToSQL,\n  'window'        : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword, suffix } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  let result = `${prefix || ''}${varName}`\n  if (suffix) result += suffix\n  val.push(result)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => [exprToSQL(info.expr), info.type, toUpper(info.nulls)].filter(hasVal).join(' '))\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n    default:\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    let separator = ' '\n    const distinctSQL = ['DISTINCT', '', str]\n    if (args.parentheses) {\n      separator = ''\n      distinctSQL[1] = '('\n      distinctSQL.push(')')\n    }\n    str = distinctSQL.filter(hasVal).join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrows = [], as, collate, column, isDual, schema, table, parentheses, properties,\n    suffix,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) {\n    str = `${str}[${array_index.number}]`\n    if (array_index.property) str = `${str}.${array_index.property.value}`\n  }\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' '),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(toUpper(keyword))\n  reference.push(tablesToSQL(table))\n  reference.push(definition && `(${definition.map(col => exprToSQL(col)).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction asToSQL(asStr) {\n  if (!asStr) return ''\n  return ['AS', /^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(asStr) ? identifierToSql(asStr) : columnIdentifierToSql(asStr)].join(' ')\n}\n\nfunction fulltextSearchToSQL(expr) {\n  const { against, as, columns, match, mode } = expr\n  const matchExpr = [toUpper(match), `(${columns.map(col => columnRefToSQL(col)).join(', ')})`].join(' ')\n  const againstExpr = [toUpper(against), ['(', exprToSQL(expr.expr), mode && ` ${literalToSQL(mode)}`, ')'].filter(hasVal).join('')].join(' ')\n  return [matchExpr, againstExpr, asToSQL(as)].filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${expr.array_index.number}]`\n  return [str, asToSQL(column.as)].filter(hasVal).join(' ')\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n  fulltextSearchToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import {\n  literalToSQL,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => exprToSQL(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createViewToSQL(stmt) {\n  const {\n    algorithm, columns, definer, keyword,\n    replace, select, sql_security: sqlSecurity,\n    type, view, with: withClause,\n  } = stmt\n  const { db, view: name } = view\n  const viewName = [identifierToSql(db), identifierToSql(name)].filter(hasVal).join('.')\n  const sql = [\n    toUpper(type),\n    toUpper(replace),\n    algorithm && `ALGORITHM = ${toUpper(algorithm)}`,\n    definer && `DEFINER = ${definer}`,\n    sqlSecurity && `SQL SECURITY ${toUpper(sqlSecurity)}`,\n    toUpper(keyword),\n    viewName,\n    columns && `(${columns.map(columnIdentifierToSql).join(', ')})`,\n    'AS',\n    unionToSQL(select),\n    toUpper(withClause),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    case 'view':\n      sql = createViewToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n    case 'table-option':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      name = [symbol, expr[resource]].filter(val => val !== null).join(' ')\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name && name.trim(),\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name, prefix } = stmt\n  const clauses = [toUpper(type), toUpper(keyword), toUpper(prefix)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    parameters.map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './sqlite'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  analyze  : analyzeToSQL,\n  attach   : attachToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  exec     : execToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  replace  : insertToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  desc     : descToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}